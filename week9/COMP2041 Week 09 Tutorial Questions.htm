<!DOCTYPE html>
<!-- saved from url=(0057)https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/questions -->
<html lang="en" class="gr__cgi_cse_unsw_edu_au"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport">
<title>

COMP2041 Week 09 Tutorial Questions

</title>
<!-- <link href="/~cs2041/19T2/flask.cgi/static/bootstrap.min.css" rel="stylesheet"> -->
<link crossorigin="anonymous" href="./COMP2041 Week 09 Tutorial Questions_files/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" rel="stylesheet">
<link href="./COMP2041 Week 09 Tutorial Questions_files/course.css" rel="stylesheet">
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/jquery.min.js"></script> -->
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/bootstrap.min.js"></script> -->
<script src="./COMP2041 Week 09 Tutorial Questions_files/jquery-3.3.1.min.js"></script>
<script src="./COMP2041 Week 09 Tutorial Questions_files/popper.min.js"></script>
<script crossorigin="anonymous" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" src="./COMP2041 Week 09 Tutorial Questions_files/bootstrap.min.js"></script>
<script src="./COMP2041 Week 09 Tutorial Questions_files/course.js" type="text/javascript"></script>
<!-- prism code-highligting -->
<link href="./COMP2041 Week 09 Tutorial Questions_files/prism.css" rel="stylesheet">
<!-- defer loading of prism.js script until DOM is loaded, as per PR #26 and https://stackoverflow.com/a/24070373 -->
<script defer="" src="./COMP2041 Week 09 Tutorial Questions_files/prism.js" type="text/javascript"></script>
<script async="" src="./COMP2041 Week 09 Tutorial Questions_files/ei.js"></script>
<link href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/" rel="canonical">
</head>
<body class="container" data-gr-c-s-loaded="true">
<div class="row" id="heading">
<div class="col-3 text-left">
<a class="heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/" id="left_heading_link" target="_blank">COMP(2041|9044) 19T2</a>
</div>
<div class="col-6 text-center">
<span class="dropdown">
<button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link dropdown-toggle heading_button" data-toggle="dropdown" id="week-selector" type="button">
        Week 09 <span class="caret"></span>
</button>
<div aria-labelledby="week-selector" class="dropdown-menu">
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/01/questions">Week 01</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/02/questions">Week 02</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/03/questions">Week 03</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/questions">Week 04</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/05/questions">Week 05</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/06/questions">Week 06</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/07/questions">Week 07</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/08/questions">Week 08</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/questions">Week 09</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/10/questions">Week 10</a>
</div>
</span>
<span class="dropdown">
<button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link dropdown-toggle heading_button" data-toggle="dropdown" id="tlb-selector" type="button">
        Tutorial <span class="caret"></span>
</button>
<div aria-labelledby="tlb-selector" class="dropdown-menu">
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/questions">Tutorial</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/09/questions">Laboratory</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/test/09/questions">Weekly Test</a>
</div>
</span>
<span class="dropdown">
<button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link dropdown-toggle heading_button" data-toggle="dropdown" id="qa-selector" type="button">
        Questions <span class="caret"></span>
</button>
<div aria-labelledby="qa-selector" class="dropdown-menu">
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/questions">Questions</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/answers">Sample Answers</a>
</div>
</span>
</div>
<div class="col-3 text-right">
<a class="heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/" id="right_heading_link" target="_blank">COMP(2041|9044) 19T2</a>
</div>
</div>
<div class="tutlab tut">
<ol>
<li>
Who has the started the assignment?
<p>
Do you have have hints or advice for other students?

</p><div></div>
</li><li>

The assignment specification doesn't fully explain the assignment - what can I do?

<div></div>
</li><li>

You work on the assignment for an hour tonight.  What do you need to do when you are finished?

<div></div>
</li><li>

What do these two commands do and why would you want to run them?

<pre class="command_line"><kbd class="shell">git remote add starting_files https://github.com/COMP2041UNSW/seddit</kbd>
<kbd class="shell">git pull starting_files master</kbd>
</pre>
<div></div>
</li><li>

How hard are the subsets?

<div></div>
</li><li>
What is Flask?
<p>
What do I need know about Flask for the assignment?

</p><div></div>
</li><li>
What is sqlite?
<p>
What do I need know about sqlite for the assignment?

</p><div></div>
</li><li>

I have heard Angular (or React or jQuery or ...) is great can I use it for the assignment?

<div></div>


I have heard bootstrap is great can I use it for the assignment?

<div></div>

An answer on Stack Overflow includes 5 lines of Javascript which does something my code needs - can I use it?

<div></div>
</li><li>
    JavaScript is a single-threaded, synchronous programming language that
    relies on asynchronous behaviour for I/O. What does this mean?

    <div></div>
</li>
<li>
    What is AJAX and why is it a important design principle?
    <div></div>
</li>
<li>
    Why is this block of code potentially problematic?

    




    
        
    



    
        <pre class="program language-clike"><code class=" language-clike"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    let name<span class="token punctuation">;</span>

    const timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">'Andrew'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<div></div>
</li>
<li>
    What options are there to manage asynchronous execution in
    JavaScript?

    <div></div>
</li>
<li>
    Familiarity with fetch is important for the assignment.
    Below is short overview of how it works. Make sure you
    go through this with your tutor!

    




    
        
    



    
        <pre class="program language-clike"><code class=" language-clike"><span class="token comment">/*
    The Fetch API takes in a url, with
    an optional second parameter,
    this includes options like additional headers,
    and body data.
*/</span>

<span class="token comment">// An example GET request</span>
const getGoogle <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://www.google.com'</span><span class="token punctuation">)</span>

<span class="token comment">// A successful fetch returns a promise of a response stream object.</span>
const googleHTML <span class="token operator">=</span> getGoogle<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Now if we wanted to do something with the googleHTML</span>
googleHTML<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>html <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// A common use case is fetching JSON</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://someurlthatreturnsJSON.com/api'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>json <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// do something with the JSON</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// More complex use cases involve adding headers</span>
<span class="token comment">// or changing the request type</span>
const blog <span class="token operator">=</span> <span class="token punctuation">{</span>
    title<span class="token punctuation">:</span> <span class="token string">'Cool Post'</span><span class="token punctuation">,</span>
    description<span class="token punctuation">:</span> <span class="token string">'Last year I did some stuff in San Francisco, it was so fun!'</span>
<span class="token punctuation">}</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://someurlthatwecanPOSTJSONto/api/post'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
    body<span class="token punctuation">:</span> blog<span class="token punctuation">,</span>
    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something if successful</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
</li>
<li>
    Images in HTML can have a src URL or a src 'data' URL.
    What's the difference?
    <div></div>
</li>
<li>
    What is callback hell and what can we do to prevent it?
    <div></div>
</li>
<li>
    Go to the resources tab on the js notes site (<a href="https://comp2041unsw.github.io/js/render.html?p=resources.md">here</a>)
    and look at the blocked tutorial example at the bottom of the page.
    Why is the UI locking up? Can promises fix this?
    <div></div>
</li>
<li>
    Go to the resources tab on the js notes site (<a href="https://comp2041unsw.github.io/js/render.html?p=resources.md">here</a>)
    and look at the promises tutorial example at the bottom of the page.
    Observe the difference in using promise.all and doing the requests in tandum (without promise.all).
    Why does the first request take so much longer then all further requests?
    What is promise.all and what does it do?
    <div></div>
</li>
<li>
    Go to the resources tab on the js notes site (<a href="https://comp2041unsw.github.io/js/render.html?p=resources.md">here</a>)
    and look at the timeouts tutorial example at the bottom of the page.
    <div></div>
</li>
<li>
    Discuss with your tutor any questions about the assignment
    <div></div>
</li>
<h3>Revision questions</h3>

The remaining tutorial questions are primarily intended for revision - either this week
or later in session.
<p>
Your tutor may still choose to cover some of the questions time permitting.
</p><p>
</p><li>
    Take the remaining time in the tute and see if you can build a a simple
    version of <a href="https://regexr.com/">regexr</a>. Simply have a textbox
    in which users can type text and a input field in which users can insert a regular expression.
    Then highlight any matching text in the textbox live. (no boiler plate code is provided this time, see if you can set up a little work space on your own!)
</li>
</ol>
</div>
<footer class="mt-3 container text-center no-print">
<p class="text-muted">
<strong>COMP(2041|9044) 19T2: Software Construction</strong>
is brought to you by <br>
the <a href="https://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>
at the <a href="https://www.unsw.edu.au/">University of New South Wales</a>, Sydney.<br>
For all enquiries, please email the class account at
<a href="mailto:@cse.unsw.edu.au">cs2041@cse.unsw.edu.au</a><br>
<small>CRICOS Provider 00098G</small>
</p>
</footer>

</body></html>