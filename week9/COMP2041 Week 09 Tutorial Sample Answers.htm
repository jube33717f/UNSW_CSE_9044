<!DOCTYPE html>
<!-- saved from url=(0055)https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/answers -->
<html lang="en" class="gr__cgi_cse_unsw_edu_au"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<title>

COMP2041 Week 09 Tutorial Sample Answers

</title>




<!-- <link href="/~cs2041/19T2/flask.cgi/static/bootstrap.min.css" rel="stylesheet"> -->
<link rel="stylesheet" href="./COMP2041 Week 09 Tutorial Sample Answers_files/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link href="./COMP2041 Week 09 Tutorial Sample Answers_files/course.css" rel="stylesheet">
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/jquery.min.js"></script> -->
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/bootstrap.min.js"></script> -->

<script src="./COMP2041 Week 09 Tutorial Sample Answers_files/jquery-3.3.1.min.js"></script>
<script src="./COMP2041 Week 09 Tutorial Sample Answers_files/popper.min.js"></script>
<script src="./COMP2041 Week 09 Tutorial Sample Answers_files/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script type="text/javascript" src="./COMP2041 Week 09 Tutorial Sample Answers_files/course.js"></script>

<!-- prism code-highligting -->
<link href="./COMP2041 Week 09 Tutorial Sample Answers_files/prism.css" rel="stylesheet">
<!-- defer loading of prism.js script until DOM is loaded, as per PR #26 and https://stackoverflow.com/a/24070373 -->
<script type="text/javascript" src="./COMP2041 Week 09 Tutorial Sample Answers_files/prism.js" defer=""></script>
<script async="" src="./COMP2041 Week 09 Tutorial Sample Answers_files/ei.js"></script>

<link rel="canonical" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">
</head>
<body class="container" data-gr-c-s-loaded="true">




<div id="heading" class="row">


<div class="col-3 text-left">
<a class="heading_link" target="_blank" id="left_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>

<div class="col-6 text-center">



    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    

    

    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="week-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Week 09 <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="week-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/01/answers">Week 01</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/02/answers">Week 02</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/03/answers">Week 03</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/answers">Week 04</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/05/answers">Week 05</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/06/answers">Week 06</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/07/answers">Week 07</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/08/answers">Week 08</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/answers">Week 09</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/10/answers">Week 10</a>
    </div>
</span>



    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="tlb-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Tutorial <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="tlb-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/answers">Tutorial</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/09/answers">Laboratory</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/test/09/answers">Weekly Test</a>
    </div>
</span>



    
    
    
    

    
    
    
    



<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="qa-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Sample Answers <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="qa-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/questions">Questions</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/answers">Sample Answers</a>
    </div>
</span>


</div>

<div class="col-3 text-right">
<a class="heading_link" target="_blank" id="right_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>


</div>


<div class="tutlab tut">
<ol>


<li>
Who has the started the assignment?
<p>
Do you have have hints or advice for other students?

</p><div class="answer">
Discussed in tutorial.
</div>

</li><li>

The assignment specification doesn't fully explain the assignment - what can I do?

<div class="answer">
A big part of the assignment is understanding how to use the backend code you've been given.
<p>
You'll spend more time doing this than implementing subset 0.
</p><p>
Read the API documentation (run the backend and look at: http://localhost:5000)
</p><p>
Read ansers on the forum.
</p><p>
Ansk questions on the forum.
</p></div>

</li><li>

You work on the assignment for an hour tonight.  What do you need to do when you are finished?

<div class="answer">
<ol>
<li>  Update your <b>diary.txt</b> with a line indicating you work for an hour and give a brief breakdown of what the work was: (was it coding, debugging, testing ...)</li>
<li> push the latest version of your code to <b>gitlab.cse.unsw.edu.au</b> by running

<pre class="command_line"><kbd class="shell">git push</kbd>
</pre>
</li>
</ol>
</div>

</li><li>

What do these two commands do and why would you want to run them?

<pre class="command_line"><kbd class="shell">git remote add starting_files https://github.com/COMP2041UNSW/seddit</kbd>
<kbd class="shell">git pull starting_files master</kbd>
</pre>

<div class="answer">
The first command tells git that you may want to push or pull commits from
the repository <b>https://github.com/COMP2041UNSW/seddit </b> and that you'll use the name <b>starting_files</b> for it.
<p>
The second command says update the master branch of your repository with commits from this repository.
</p><p>
When we fix any issues with the backend we'll push changes to the repo<b>https://github.com/COMP2041UNSW/seddit</b>.
</p><p>
Please don't change any files in the backend, if you change any files in the backend you may get
a merge conflict when you pull the new versions!
</p></div>

</li><li>

How hard are the subsets?

<div class="answer">
<p>
Once you understand what you have to do, subset 0 is not that hard.
</p><p>
Subset 1 will require more coding but is  quite doable and can get you a CR.
</p><p>
Subset 2 is more work but not that hard and can get you a DN.
</p><p>
Subsets 3 are 4 are much more difficult and will require lots of reading, thinking &amp; coding, if you want a HD.
</p></div>

</li><li>
What is Flask?
<p>
What do I need know about Flask for the assignment?

</p><div class="answer">
Flask is a a very popular web framework based on Python.
<p>
It has powerful features available and is  used in large high traffic applications at companies such
as pinterest, linkedin, twilio and lyft.
</p><p>
It has been used for the assignment backend code.
</p><p>
You can not change the backend.
</p><p>
You do not need to know anything about Flask for the assignment.
</p></div>

</li><li>
What is sqlite?
<p>
What do I need know about sqlite for the assignment?

</p><div class="answer">
sqlite is a a very popular embedded database system.
It is much simpler to deploy &amp; use than a client/server database system
and  works well for low-medium traffic applications with few clients.
<p>
It has been used for the assignment backend code.
</p><p>
You can not change the backend.
</p><p>
You do not need to know anything about sqlite for the assignment.
</p></div>

</li><li>

I have heard Angular (or React or jQuery or ...) is great can I use it for the assignment?

<div class="answer">
No you can't - you can only use Javascript you write yourself.
<p>
You can't use Javascript libraries or frameworks.
</p></div>


I have heard bootstrap is great can I use it for the assignment?

<div class="answer">
No you can't - you can only use CSS you write yourself.
</div>

An answer on Stack Overflow includes 5 lines of Javascript which does something my code needs - can I use it?

<div class="answer">
Yes you can with clear attribution (include the Stack Overflow URL in a comment)
<p>
But you can't ask people on Stack Overflow for code!
</p></div>




</li><li>
    JavaScript is a single-threaded, synchronous programming language that
    relies on asynchronous behaviour for I/O. What does this mean?

    <div class="answer">
        <p>
            JavaScript uses a single-threaded event loop to
            execute code. Rather than 'blocking', or pausing
            execution when it hits I/O calls (read, write to hardware, network)
            it instead provides a callback that will be executed
            when the I/O call completes.
        </p>
        <p>
            This allows the program to continue
            execution (important for UI responsiveness among other things),
             but comes at a cost: we can't guarantee
             that the consecutive lines of code will
             be executed in they order they are written!
        </p>
        <p>
            It's important to note: in the context of the JavaScript engine
            one thing is always happening at a time. BUT, JavaScript
            implicitly relies on the its environment to deal with
            tasks happening at the same time.
        </p>
    </div>
</li>

<li>
    What is AJAX and why is it a important design principle?
    <div class="answer">
        <p>
          Asynchronous JavaScript And XML.
          It’s called that because it was a set of principles for developing a
           web application that can send and retrieve data from a server asynchronously
           (in the background) without interfering with the display and behaviour of the existing page.
           The reason it mentions XML is because when it was developed XML was
           how sites sent little bits of data that weren’t full pages to the client.</p>

           <p>These days we use another format; JSON but the principle still stands.
           The basic idea is simply a separation of the data a page displays and the display itself.</p>

           <p>Basically rather then the server sending the html which renders into your newsfeed,
           it sends a framework to render a arbitrary newsfeed post and then your
           computer asks the server for individual posts.</p>

           <p> why? It’s good decoupled code, you can change what data is
             being sent and how it gets rendered independently.
             It also shifts to making the client computer do the heavy rendering
             while leaving the server to do quick data processing.
             This ends up being faster overall, computers can handle having to
             render a bunch of things more then server’s can handle doing a lot
              of processing to form html simply because servers are getting hit up non stop.
        </p>
    </div>
</li>


<li>
    Why is this block of code potentially problematic?

    




    
        
    



    
        <pre class="program language-clike"><code class=" language-clike"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    let name<span class="token punctuation">;</span>

    const timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">'Andrew'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>





    <div class="answer">
        <p>
            The setTimeout call is asynchronous; this means
            it will be pushed to a future iteration of the event loop.
            Meanwhile, the return statement is synchronous and will
            occur immediately.
        </p>
        <p>
            The result will be that the function will return
            name as undefined before the setTimeout is ever executed.
        </p>
    </div>
</li>

<li>
    What options are there to manage asynchronous execution in
    JavaScript?

    <div class="answer">
        <p>
            Asynchronous behaviour is managed in three main ways:
        </p>
        <ul>
            <li>
                Callbacks: Traditional way to handle the 'then' versus 'now'
                problem. Callbacks are simply functions that we can attach
                to an event. When the event is triggered, the callback is run.
                Callbacks can however get messy to reason with when more
                complex event interaction is required.
            </li>
            <li>
                Promises: As of ES6+, promises have allowed programmers
                to tie asynchronous calls together in a synchronous way.
                Promises return Promises so they can be chained together.
                See MDN or course notes for more.
            </li>
            <li>
                async/await: As of ES7+, there's been an extension
                to the Promise API to allow a 'simpler' syntax for
                Promises. This is async/await. See MDN or course notes for more.
            </li>
        </ul>
    </div>
</li>

<li>
    Familiarity with fetch is important for the assignment.
    Below is short overview of how it works. Make sure you
    go through this with your tutor!

    




    
        
    



    
        <pre class="program language-clike"><code class=" language-clike"><span class="token comment">/*
    The Fetch API takes in a url, with
    an optional second parameter,
    this includes options like additional headers,
    and body data.
*/</span>

<span class="token comment">// An example GET request</span>
const getGoogle <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://www.google.com'</span><span class="token punctuation">)</span>

<span class="token comment">// A successful fetch returns a promise of a response stream object.</span>
const googleHTML <span class="token operator">=</span> getGoogle<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Now if we wanted to do something with the googleHTML</span>
googleHTML<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>html <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// A common use case is fetching JSON</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://someurlthatreturnsJSON.com/api'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>json <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// do something with the JSON</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// More complex use cases involve adding headers</span>
<span class="token comment">// or changing the request type</span>
const blog <span class="token operator">=</span> <span class="token punctuation">{</span>
    title<span class="token punctuation">:</span> <span class="token string">'Cool Post'</span><span class="token punctuation">,</span>
    description<span class="token punctuation">:</span> <span class="token string">'Last year I did some stuff in San Francisco, it was so fun!'</span>
<span class="token punctuation">}</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://someurlthatwecanPOSTJSONto/api/post'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
    body<span class="token punctuation">:</span> blog<span class="token punctuation">,</span>
    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something if successful</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>




</li>

<li>
    Images in HTML can have a src URL or a src 'data' URL.
    What's the difference?
    <div class="answer">
        <p>URL based images will fetch external resources
            and populate with the image (assiuming it's a valid image)
            when loaded.
        </p>
        <p>
          Data URL based images use a raw encoding of the image's bytes inline.
          The assignment relies on data based images. Data URLs can
          be used for many different file formats (not just images).
        </p>
    </div>
</li>

<li>
    What is callback hell and what can we do to prevent it?
    <div class="answer">
        <p>
          when you have callbacks waiting for callbacks waiting for callbacks
          due to a need to do a set of async operations in order.
          We can fix this by using promises which neaten the syntax and
          provide useful utilities like promise.all and promise.race.
          see <a href="https://comp2041unsw.github.io/js/render.html?p=notes/async/index.md">https://comp2041unsw.github.io/js/render.html?p=notes/async/index.md</a>
          for more detail.
        </p>
    </div>
</li>

<li>
    Go to the resources tab on the js notes site (<a href="https://comp2041unsw.github.io/js/render.html?p=resources.md">here</a>)
    and look at the blocked tutorial example at the bottom of the page.
    Why is the UI locking up? Can promises fix this?
    <div class="answer">
        <p>
          The ui locks up because js only allows 1 thing to run at a time,
          the slow function takes up this only slot so the key press events have to wait.
        </p>
        <p>
          Promises would not fix this as this is compute bound, this is rare in
          js but if your issue is heavy processing promises don't help.
          That being said web workers may be able to let you shift a computationally
          expencive operation to the background so you can still react to events
        </p>
    </div>
</li>

<li>
    Go to the resources tab on the js notes site (<a href="https://comp2041unsw.github.io/js/render.html?p=resources.md">here</a>)
    and look at the promises tutorial example at the bottom of the page.
    Observe the difference in using promise.all and doing the requests in tandum (without promise.all).
    Why does the first request take so much longer then all further requests?
    What is promise.all and what does it do?
    <div class="answer">
        <p>
          The first request is always the longest because once the browser gets the data
          it then caches various details and information to make further requests quicker.
        </p>
        <p>
          promise.all executes multiple promises in tadem and waits for them all to complete
          before finishing. This is convinient and a lot faster then running them one at a time.
          in addition it has a fail fast feature where if one promise fails the entire list
          fails allowing you to fail early.
        </p>
    </div>
</li>

<li>
    Go to the resources tab on the js notes site (<a href="https://comp2041unsw.github.io/js/render.html?p=resources.md">here</a>)
    and look at the timeouts tutorial example at the bottom of the page.
    <div class="answer">
        <p>
          setTimeout always adds your handler onto the event queue, if it's 0 seconds
          it does right on there but wither longer delays it'll wait before putting it on.
          Regardless you have to wait for the current handler to finish before you
          can handle the next one on the queue.
        </p>
    </div>
</li>

<li>
    Discuss with your tutor any questions about the assignment
    <div class="answer">
        <p>
          Remember that the api docs that are live
          at localhost:5000 are incredibly useful and should be a first point
          of contact for any backend related questions.
        </p>
        <p>
          also pull often because fixes are going out every now and then for
          little bugs and issues in the backend
        </p>
    </div>
</li>



<h3>Revision questions</h3>

The remaining tutorial questions are primarily intended for revision - either this week
or later in session.
<p>
Your tutor may still choose to cover some of the questions time permitting.
</p><p>



</p><li>
    Take the remaining time in the tute and see if you can build a a simple
    version of <a href="https://regexr.com/">regexr</a>. Simply have a textbox
    in which users can type text and a input field in which users can insert a regular expression.
    Then highlight any matching text in the textbox live. (no boiler plate code is provided this time, see if you can set up a little work space on your own!)
</li>


</ol>
</div>





<footer class="mt-3 container text-center no-print">
<p class="text-muted">
<strong>COMP(2041|9044) 19T2: Software Construction</strong>
is brought to you by <br>
the <a href="https://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>
at the <a href="https://www.unsw.edu.au/">University of New South Wales</a>, Sydney.<br>
For all enquiries, please email the class account at
<a href="mailto:@cse.unsw.edu.au">cs2041@cse.unsw.edu.au</a><br>

<small>CRICOS Provider 00098G</small>
</p>



</footer>





</body></html>