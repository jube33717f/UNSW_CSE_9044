<!DOCTYPE html>
<!-- saved from url=(0055)https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/08/answers -->
<html lang="en" class="gr__cgi_cse_unsw_edu_au"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<title>

COMP2041 Week 08 Laboratory Sample Solutions

</title>




<!-- <link href="/~cs2041/19T2/flask.cgi/static/bootstrap.min.css" rel="stylesheet"> -->
<link rel="stylesheet" href="./COMP2041 Week 08 Laboratory Sample Solutions_files/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link href="./COMP2041 Week 08 Laboratory Sample Solutions_files/course.css" rel="stylesheet">
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/jquery.min.js"></script> -->
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/bootstrap.min.js"></script> -->

<script src="./COMP2041 Week 08 Laboratory Sample Solutions_files/jquery-3.3.1.min.js"></script>
<script src="./COMP2041 Week 08 Laboratory Sample Solutions_files/popper.min.js"></script>
<script src="./COMP2041 Week 08 Laboratory Sample Solutions_files/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script type="text/javascript" src="./COMP2041 Week 08 Laboratory Sample Solutions_files/course.js"></script>

<!-- prism code-highligting -->
<link href="./COMP2041 Week 08 Laboratory Sample Solutions_files/prism.css" rel="stylesheet">
<!-- defer loading of prism.js script until DOM is loaded, as per PR #26 and https://stackoverflow.com/a/24070373 -->
<script type="text/javascript" src="./COMP2041 Week 08 Laboratory Sample Solutions_files/prism.js" defer=""></script>
<script async="" src="./COMP2041 Week 08 Laboratory Sample Solutions_files/ei.js"></script>

<link rel="canonical" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">
</head>
<body class="container" data-gr-c-s-loaded="true">




<div id="heading" class="row">


<div class="col-3 text-left">
<a class="heading_link" target="_blank" id="left_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>

<div class="col-6 text-center">



    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    

    

    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="week-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Week 08 <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="week-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/01/answers">Week 01</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/02/answers">Week 02</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/03/answers">Week 03</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/04/answers">Week 04</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/05/answers">Week 05</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/06/answers">Week 06</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/07/answers">Week 07</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/08/answers">Week 08</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/09/answers">Week 09</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/10/answers">Week 10</a>
    </div>
</span>



    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="tlb-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Laboratory <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="tlb-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/08/answers">Tutorial</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/08/answers">Laboratory</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/test/08/answers">Weekly Test</a>
    </div>
</span>



    
    
    
    

    
    
    
    



<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="qa-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Sample Solutions <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="qa-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/08/questions">Exercises</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/08/answers">Sample Solutions</a>
    </div>
</span>


</div>

<div class="col-3 text-right">
<a class="heading_link" target="_blank" id="right_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>


</div>


<div class="tutlab lab">




<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Objectives
            </h3>
        </div>
        <div class="card-body">

<ul>

<li>Javascript Strikes Back</li>

</ul>

</div>
    </div>



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Preparation
            </h3>
        </div>
        <div class="card-body">

Before the lab you should re-read the relevant lecture slides and their accompanying examples.


</div>
    </div>



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Getting Started
            </h3>
        </div>
        <div class="card-body">



Create a new directory for this lab called <code>lab08</code> and change to this directory with these comamnds:

<pre class="command_line"><kbd class="shell">mkdir lab08</kbd>
<kbd class="shell">cd lab08</kbd>
</pre>

</div>
    </div>







 


    
    



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Exercise: Counter
            </h3>
        </div>
        <div class="card-body">












    


If you are working at CSE, explode the <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_counter/counter.zip">zip file</a> containing the files for this activity:

<pre class="command_line"><kbd class="shell">unzip /web/cs2041/19T2/activities/js_counter/counter.zip</kbd>
</pre>

<p>
If you are working on your computer, download <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_counter/counter.zip">counter.zip</a> and unzip it .
</p>

Then in one window use Python to start a HTTP server for the exercises

<pre class="command_line"><kbd class="shell">cd counter</kbd>
<kbd class="shell">python3 -m http.server</kbd>
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</pre>

If you access the URL printed by Python you will see instructions for the exercise.
<p>
Remember to refresh the web page in your browser (<code>control-R</code> inchrome and firefox)
when you make a change to the Javascript so it gets loaded.
You can stop the server by pressing <code> control-c </code>
</p><p>

    


You do not change <b>index.html</b> but you should read its source:

</p><pre class="command_line"><kbd class="shell">cd counter</kbd>
<kbd class="shell">more index.html</kbd>
</pre>

Notice  <b>index.html</b> loads  <b>counter.js</b>.  You need to edit  <b>counter.js</b>

<pre class="command_line"><kbd class="shell">vi counter.js</kbd>
</pre>

Your task is to add JavaScript to <b>counter.js</b> so that the current time is shown on the web page.
<p>
Your Javascript should put the current time in the <b>output</b> div.
</p><p>
The time should be updated every second.








There is no autotest and no automarking of this question.
</p><p>
When you have completed demonstrate your work to another student in your lab
and ask them to enter a
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/peer_assess/lab08_js_counter/">peer assessment here</a>
</p><p>
It is prefered you do this during your lab, but if this is not possible
you may demonstrate your work to any other COMP(2041|9044) student before Tuesday 30 July 17:59:59.
Note, you must also submit the work with give.
</p><p>





















    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



</p><pre class="command_line"><kbd class="shell">give cs2041 lab08_js_counter counter.js</kbd>
</pre>





    
        
        
            
            <div class="answer">
                Sample solution for <code>counter.js</code>
                






    
        <pre class="program language-clike"><code class=" language-clike"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token string">'use strict'</span><span class="token punctuation">;</span>
   const output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   void <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      const d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      output<span class="token punctuation">.</span>innerText <span class="token operator">=</span> `$<span class="token punctuation">{</span>d<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>d<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>d<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>`<span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>





                
            </div>
            
        
    


</div>
    </div>

 


    
    



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Exercise: Toggle
            </h3>
        </div>
        <div class="card-body">












    


If you are working at CSE, explode the <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_toggle/toggle.zip">zip file</a> containing the files for this activity:

<pre class="command_line"><kbd class="shell">unzip /web/cs2041/19T2/activities/js_toggle/toggle.zip</kbd>
</pre>

<p>
If you are working on your computer, download <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_toggle/toggle.zip">toggle.zip</a> and unzip it .
</p>

Then in one window use Python to start a HTTP server for the exercises

<pre class="command_line"><kbd class="shell">cd toggle</kbd>
<kbd class="shell">python3 -m http.server</kbd>
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</pre>

If you access the URL printed by Python you will see instructions for the exercise.
<p>
Remember to refresh the web page in your browser (<code>control-R</code> inchrome and firefox)
when you make a change to the Javascript so it gets loaded.
You can stop the server by pressing <code> control-c </code>
</p><p>

    


You do not change <b>index.html</b> but you should read its source:

</p><pre class="command_line"><kbd class="shell">cd toggle</kbd>
<kbd class="shell">more index.html</kbd>
</pre>

Notice  <b>index.html</b> loads  <b>toggle.js</b>.  You need to edit  <b>toggle.js</b>

<pre class="command_line"><kbd class="shell">vi toggle.js</kbd>
</pre>

<p>Your task is to modify the code in <b>toggle.js</b> so that it adds and removes the class 'hide' from the <code>output</code> element every 2 seconds. </p>








There is no autotest and no automarking of this question.
<p>
When you have completed demonstrate your work to another student in your lab
and ask them to enter a
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/peer_assess/lab08_js_toggle/">peer assessment here</a>
</p><p>
It is prefered you do this during your lab, but if this is not possible
you may demonstrate your work to any other COMP(2041|9044) student before Tuesday 30 July 17:59:59.
Note, you must also submit the work with give.
</p><p>





















    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



</p><pre class="command_line"><kbd class="shell">give cs2041 lab08_js_toggle toggle.js</kbd>
</pre>





    
        
        
            
            <div class="answer">
                Sample solution for <code>toggle.js</code>
                






    
        <pre class="program language-clike"><code class=" language-clike"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token string">'use strict'</span><span class="token punctuation">;</span>
   <span class="token comment">// write your js here.</span>
   const d <span class="token operator">=</span> document<span class="token punctuation">;</span>
   const output <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      output<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'hide'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>





                
            </div>
            
        
    


</div>
    </div>

 


    
    



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Exercise: Collapse
            </h3>
        </div>
        <div class="card-body">












    


If you are working at CSE, explode the <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_collapse/collapse.zip">zip file</a> containing the files for this activity:

<pre class="command_line"><kbd class="shell">unzip /web/cs2041/19T2/activities/js_collapse/collapse.zip</kbd>
</pre>

<p>
If you are working on your computer, download <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_collapse/collapse.zip">collapse.zip</a> and unzip it .
</p>

Then in one window use Python to start a HTTP server for the exercises

<pre class="command_line"><kbd class="shell">cd collapse</kbd>
<kbd class="shell">python3 -m http.server</kbd>
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</pre>

If you access the URL printed by Python you will see instructions for the exercise.
<p>
Remember to refresh the web page in your browser (<code>control-R</code> inchrome and firefox)
when you make a change to the Javascript so it gets loaded.
You can stop the server by pressing <code> control-c </code>
</p><p>

    


You do not change <b>index.html</b> but you should read its source:

</p><pre class="command_line"><kbd class="shell">cd collapse</kbd>
<kbd class="shell">more index.html</kbd>
</pre>

Notice  <b>index.html</b> loads  <b>collapse.js</b>.  You need to edit  <b>collapse.js</b>

<pre class="command_line"><kbd class="shell">vi collapse.js</kbd>
</pre>

<p>Your task is to modify the code in <b>collapse.js</b></p>

<p> I frankly don't like UNSW handbook so I've made my own to outline all the COMP courses there are for me. But the page is a bit cluttered.</p>
<p>Write some JS that makes the "extra info" section of each information element disappear on the click of the "up" arrow button on the top right of each element.</p>
<p> Once collapsed the item doesn't need to reexpand just yet.</p>
<p><b>Optional Challange:</b> Finish this exercise using only a single click event listener and 0 changes to the HTML.</p>








There is no autotest and no automarking of this question.
<p>
When you have completed demonstrate your work to another student in your lab
and ask them to enter a
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/peer_assess/lab08_js_collapse/">peer assessment here</a>
</p><p>
It is prefered you do this during your lab, but if this is not possible
you may demonstrate your work to any other COMP(2041|9044) student before Tuesday 30 July 17:59:59.
Note, you must also submit the work with give.
</p><p>





















    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



</p><pre class="command_line"><kbd class="shell">give cs2041 lab08_js_collapse collapse.js</kbd>
</pre>





    
        
        
            
            <div class="answer">
                Sample solution for <code>collapse.js</code>
                






    
        <pre class="program language-clike"><code class=" language-clike"><span class="token comment">// Challange Solution</span>
<span class="token comment">//     This is pretty unmaintable code, if we were to add anything</span>
<span class="token comment">//     to the info cards the code would break but</span>
<span class="token comment">//     this is one of the cases where you can leverage</span>
<span class="token comment">//     event bubbling to utilise Js and avoid HTML id tags</span>
<span class="token comment">//     Take with a grain of salt though</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">'use strict'</span><span class="token punctuation">;</span>
  const main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  main<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">==</span> <span class="token string">'I'</span><span class="token punctuation">)</span>
      e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// This is a standard Solution - relies on editing html</span>
<span class="token comment">//    Note this code doesn't run, the function is just delcared</span>
<span class="token comment">//    The code above is a Immediately Invoked Function Expression</span>
<span class="token comment">//    Which declares a function and then runs it immediately</span>
<span class="token comment">//    To run it remove the brackets and function invoke from above and</span>
<span class="token comment">//    shift it down here</span>
<span class="token keyword">function</span> <span class="token function">standard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* eslint-disable-line no-unused-vars */</span>
  <span class="token string">'use strict'</span><span class="token punctuation">;</span>
  const NUM_CARDS <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  const cards <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>NUM_CARDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>`item<span class="token operator">-</span>$<span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span>`<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cards<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>card <span class="token operator">=</span><span class="token operator">&gt;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> toggle<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">toggle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    const content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>`$<span class="token punctuation">{</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">-</span>content`<span class="token punctuation">)</span><span class="token punctuation">;</span>
    content<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>





                
            </div>
            
        
    


</div>
    </div>

 


    
    



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Exercise: Expand
            </h3>
        </div>
        <div class="card-body">












    


If you are working at CSE, explode the <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_expand/expand.zip">zip file</a> containing the files for this activity:

<pre class="command_line"><kbd class="shell">unzip /web/cs2041/19T2/activities/js_expand/expand.zip</kbd>
</pre>

<p>
If you are working on your computer, download <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_expand/expand.zip">expand.zip</a> and unzip it .
</p>

Then in one window use Python to start a HTTP server for the exercises

<pre class="command_line"><kbd class="shell">cd expand</kbd>
<kbd class="shell">python3 -m http.server</kbd>
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</pre>

If you access the URL printed by Python you will see instructions for the exercise.
<p>
Remember to refresh the web page in your browser (<code>control-R</code> inchrome and firefox)
when you make a change to the Javascript so it gets loaded.
You can stop the server by pressing <code> control-c </code>
</p><p>

    


You do not change <b>index.html</b> but you should read its source:

</p><pre class="command_line"><kbd class="shell">cd expand</kbd>
<kbd class="shell">more index.html</kbd>
</pre>

Notice  <b>index.html</b> loads  <b>expand.js</b>.  You need to edit  <b>expand.js</b>

<pre class="command_line"><kbd class="shell">vi expand.js</kbd>
</pre>

<p>Your task is to modify the code in <b>expand.js</b>

</p><p>Extend the collapse code to change the icon from an "up" arrow to a down arrow once the <code>div</code> is collapsed. The button should then expand the <code>div</code> when clicked on and revert the icon.</p>
<p><b>Optional Challenge:</b> Finish this exercise using only a single click event listener and 0 changes to the HTML.</p>








There is no autotest and no automarking of this question.
<p>
When you have completed demonstrate your work to another student in your lab
and ask them to enter a
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/peer_assess/lab08_js_expand/">peer assessment here</a>
</p><p>
It is prefered you do this during your lab, but if this is not possible
you may demonstrate your work to any other COMP(2041|9044) student before Tuesday 30 July 17:59:59.
Note, you must also submit the work with give.
</p><p>





















    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



</p><pre class="command_line"><kbd class="shell">give cs2041 lab08_js_expand expand.js</kbd>
</pre>





    
        
        
            
            <div class="answer">
                Sample solution for <code>expand.js</code>
                






    
        <pre class="program language-clike"><code class=" language-clike"><span class="token comment">// Standard Solution</span>
<span class="token comment">//    this relies on adding id's into the html</span>

<span class="token keyword">function</span> <span class="token function">standard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* eslint-disable-line */</span>
  <span class="token string">'use strict'</span><span class="token punctuation">;</span>
  const NUM_CARDS <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  const cards <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>NUM_CARDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span>`item<span class="token operator">-</span>$<span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span>`<span class="token punctuation">)</span><span class="token punctuation">;</span>

  cards<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>toggle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">toggle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    const content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>`$<span class="token punctuation">{</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">-</span>content`<span class="token punctuation">)</span><span class="token punctuation">;</span>
    content<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">==</span> <span class="token string">'none'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'block'</span> <span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">==</span> <span class="token string">'expand_more'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'expand_less'</span> <span class="token punctuation">:</span> <span class="token string">'expand_more'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Challenge Solution</span>
<span class="token comment">//     Again , take with a grain of salt though</span>
<span class="token keyword">function</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* eslint-disable-line */</span>
  <span class="token string">'use strict'</span><span class="token punctuation">;</span>
  const main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  main<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// see if the event originated from the button</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">==</span> <span class="token string">'I'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      let state <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">==</span> <span class="token string">'expand_more'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'expand_less'</span><span class="token punctuation">;</span>
        state <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'expand_more'</span><span class="token punctuation">;</span>
        state <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// traverse the dom tree to find the content section and toggle it's display</span>
      e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Since we didn't wrap these functions and execute them immedietly i.e</span>
<span class="token comment">//        (function(){console.log('hello workd')})();</span>
<span class="token comment">// we need to ask the browser to run one of them once the page is loaded.</span>
<span class="token comment">// the bottom acheives the same effect as window.addEventListener('load', standard)</span>

document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> challenge<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// swap 'standard' to 'challange' above to run the challange Solution</span></code></pre>





                
            </div>
            
        
    


</div>
    </div>

 


    
    



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Challenge Exercise: js_adventure_script
            </h3>
        </div>
        <div class="card-body">












    


If you are working at CSE, explode the <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_adventure_script/adventure_script.zip">zip file</a> containing the files for this activity:

<pre class="command_line"><kbd class="shell">unzip /web/cs2041/19T2/activities/js_adventure_script/adventure_script.zip</kbd>
</pre>

<p>
If you are working on your computer, download <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/js_adventure_script/adventure_script.zip">adventure_script.zip</a> and unzip it .
</p>

Then in one window use Python to start a HTTP server for the exercises

<pre class="command_line"><kbd class="shell">cd adventure_script</kbd>
<kbd class="shell">python3 -m http.server</kbd>
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</pre>

If you access the URL printed by Python you will see instructions for the exercise.
<p>
Remember to refresh the web page in your browser (<code>control-R</code> inchrome and firefox)
when you make a change to the Javascript so it gets loaded.
You can stop the server by pressing <code> control-c </code>
</p><p>

    


You do not change <b>index.html</b> but you should read its source:

</p><pre class="command_line"><kbd class="shell">cd adventure_script</kbd>
<kbd class="shell">more index.html</kbd>
</pre>

Notice  <b>index.html</b> loads  <b>adventure_script.js</b>.  You need to edit  <b>adventure_script.js</b>

<pre class="command_line"><kbd class="shell">vi adventure_script.js</kbd>
</pre>

<p>Your task is to modify the code in <b>adventure.js</b></p>

<p> There is the basic framework for a simple game, fill out the following functions: </p>
<ol>
  <li> Make the player (the ghost) move left and right via the left and right arrow keys. </li>
  <li> Have the 'z' key toggle the player between walk and sprint mode (slow and fast movement). </li>
  <li> Have the 'x' key shoot a fireball towards the right of the screen. There is a provided image in <code>imgs/</code>.
     To make things simple the player can only have 1 fireball on the screen at any one time. </li>
</ol>








There is no autotest and no automarking of this question.
<p>
When you have completed demonstrate your work to another student in your lab
and ask them to enter a
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/peer_assess/lab08_js_adventure_script/">peer assessment here</a>
</p><p>
It is prefered you do this during your lab, but if this is not possible
you may demonstrate your work to any other COMP(2041|9044) student before Tuesday 30 July 17:59:59.
Note, you must also submit the work with give.
</p><p>





















    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



</p><pre class="command_line"><kbd class="shell">give cs2041 lab08_js_adventure_script adventure.js</kbd>
</pre>





    
        
        
            
            <div class="answer">
                Sample solution for <code>adventure.js</code>
                






    
        <pre class="program language-clike"><code class=" language-clike"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token string">'use strict'</span><span class="token punctuation">;</span>
   const player <span class="token operator">=</span> <span class="token punctuation">{</span>
     dom<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"player"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     fb<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     fbp<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
     x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
     y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
     speed<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
     paint<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       this<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> `<span class="token function">translateX</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>this<span class="token punctuation">.</span>x<span class="token punctuation">}</span>px<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>this<span class="token punctuation">.</span>y<span class="token punctuation">}</span>px<span class="token punctuation">)</span>`<span class="token punctuation">;</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>fbp <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        this<span class="token punctuation">.</span>fb<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> `<span class="token function">translateX</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>this<span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">}</span>px<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>this<span class="token punctuation">.</span>y<span class="token punctuation">}</span>px<span class="token punctuation">)</span>`<span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     shoot<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>fbp<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>fbp <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
       this<span class="token punctuation">.</span>fb<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
       this<span class="token punctuation">.</span>fbp <span class="token operator">=</span> this<span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">;</span>
       let i <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         this<span class="token punctuation">.</span>fb<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> `<span class="token function">translateX</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>this<span class="token punctuation">.</span>fbp<span class="token punctuation">}</span>px<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>this<span class="token punctuation">.</span>y<span class="token punctuation">}</span>px<span class="token punctuation">)</span>`<span class="token punctuation">;</span>
         this<span class="token punctuation">.</span>fbp<span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token function">clearInterval</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
         this<span class="token punctuation">.</span>fbp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
         this<span class="token punctuation">.</span>fb<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">'ArrowLeft'</span><span class="token punctuation">)</span> player<span class="token punctuation">.</span>x<span class="token operator">-</span><span class="token operator">=</span>player<span class="token punctuation">.</span>speed<span class="token punctuation">;</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">'ArrowRight'</span><span class="token punctuation">)</span> player<span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token operator">=</span>player<span class="token punctuation">.</span>speed<span class="token punctuation">;</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">'z'</span><span class="token punctuation">)</span> player<span class="token punctuation">.</span>speed <span class="token operator">=</span> player<span class="token punctuation">.</span>speed <span class="token operator">===</span> <span class="token number">20</span> <span class="token operator">?</span> <span class="token number">10</span> <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">'x'</span><span class="token punctuation">)</span> player<span class="token punctuation">.</span><span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     player<span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>





                
            </div>
            
        
    


</div>
    </div>





<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Submission
            </h3>
        </div>
        <div class="card-body">


When you are finished each exercises make sure you submit your work by running <b>give</b>.
<p>
You can run <b>give</b> multiple times.
Only your last submission will be marked.
</p><p>
Don't submit any exercises you haven't attempted.
</p><p>
If you are working at home, you may find it more convenient
to upload your work via
 <a href="https://cgi.cse.unsw.edu.au/~give/code/login.php?app=/~give/Student/give.php&amp;debug=get_authuser">give's web interface</a>.
</p><p>
Remember you have until

<b>Tuesday 30 July 17:59:59</b>


to submit your work.
</p><p>
You cannot obtain marks by e-mailing lab work to tutors or lecturers.
</p><p>
You check the files you have submitted <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/student/">here</a>
</p><p>
Automarking will be run by the lecturer several days after the submission deadline
for the test, using test cases that you haven't seen:
different to the test cases <code><kbd>autotest</kbd></code> runs for
you.
</p><p>
(Hint: do your own testing as well as running
<code><kbd>autotest</kbd></code>)
</p><p>
After automarking is run by the lecturer you can
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/student/">view it here</a>
the resulting mark will also be available via
<a href="https://cgi.cse.unsw.edu.au/~give/Student/sturec.php">via give's web interface</a>
</p><p>
</p><h4>Lab Marks</h4>
<p>
When all components of a lab  are automarked you should be able to view the
the marks <a href="https://cgi.cse.unsw.edu.au/~give/Student/sturec.php">via give's web interface</a>
or by running this command on a CSE machine:

</p><pre class="command_line"><kbd class="shell">2041 classrun -sturec</kbd>
</pre>
<p>
The lab exercises for each week are worth in total 1.2 marks.
</p><p>
Usually each lab exercise will be worth the same - for example if there are 5 lab exercises each will be worth 0.4 marks.
</p><p>
Except challenge exercises (see below) will never total more than 20% of each week's lab mark.
</p><p>
All of your lab marks for weeks 1-10, will be summed to give you a mark out of 12.
</p><p>
If their sum exceeds 9 - your total mark will be capped at 9.

</p><h4>Running Autotests On your Own Computer</h4>

An experimental version of autotest exists which may allow you to run autotest on your own computer.
<p>
If you are running Linux,  Windows Subsystem for Linux or OSX.  These commands might let you run autotests at home.

</p><pre class="command_line"><kbd class="shell">sudo wget https://cgi.cse.unsw.edu.au/~cs2041/19T2/resources/home_autotest -O/usr/local/bin/2041_autotest</kbd>
<kbd class="shell">sudo chmod 755 /usr/local/bin/2041_autotest</kbd>
<kbd class="shell">2041_autotest shell_snapshot</kbd>
</pre>

Autotest itself needs Python 3.6 (or later) installed.
<p>
Particular autotests may require other software install, e.g.  autotests of perl programs require Perl installed (of course).
</p><p>
The legit autotests need  python3.7, git &amp; binfmt-support installed.
</p><p>
The program embeds the autotests themselves, so you'll need to re-download if autotests are changed, added, fixed, ...
</p><p>
If it breaks on your computer post on the class forum  and we'll fix if we can, but this is very definitely experimental.

</p></div>
    </div>


</div>





<footer class="mt-3 container text-center no-print">
<p class="text-muted">
<strong>COMP(2041|9044) 19T2: Software Construction</strong>
is brought to you by <br>
the <a href="https://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>
at the <a href="https://www.unsw.edu.au/">University of New South Wales</a>, Sydney.<br>
For all enquiries, please email the class account at
<a href="mailto:@cse.unsw.edu.au">cs2041@cse.unsw.edu.au</a><br>

<small>CRICOS Provider 00098G</small>
</p>



</footer>





</body></html>