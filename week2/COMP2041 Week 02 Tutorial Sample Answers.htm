<!DOCTYPE html>
<!-- saved from url=(0055)https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/02/answers -->
<html lang="en" class="gr__cgi_cse_unsw_edu_au"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<title>

COMP2041 Week 02 Tutorial Sample Answers

</title>




<!-- <link href="/~cs2041/19T2/flask.cgi/static/bootstrap.min.css" rel="stylesheet"> -->
<link rel="stylesheet" href="./COMP2041 Week 02 Tutorial Sample Answers_files/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link href="./COMP2041 Week 02 Tutorial Sample Answers_files/course.css" rel="stylesheet">
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/jquery.min.js"></script> -->
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/bootstrap.min.js"></script> -->

<script src="./COMP2041 Week 02 Tutorial Sample Answers_files/jquery-3.3.1.min.js"></script>
<script src="./COMP2041 Week 02 Tutorial Sample Answers_files/popper.min.js"></script>
<script src="./COMP2041 Week 02 Tutorial Sample Answers_files/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script type="text/javascript" src="./COMP2041 Week 02 Tutorial Sample Answers_files/course.js"></script>

<!-- prism code-highligting -->
<link href="./COMP2041 Week 02 Tutorial Sample Answers_files/prism.css" rel="stylesheet">
<!-- defer loading of prism.js script until DOM is loaded, as per PR #26 and https://stackoverflow.com/a/24070373 -->
<script type="text/javascript" src="./COMP2041 Week 02 Tutorial Sample Answers_files/prism.js" defer=""></script>
<script async="" src="./COMP2041 Week 02 Tutorial Sample Answers_files/ei.js"></script>

<link rel="canonical" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">
</head>
<body class="container" data-gr-c-s-loaded="true">




<div id="heading" class="row">


<div class="col-3 text-left">
<a class="heading_link" target="_blank" id="left_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>

<div class="col-6 text-center">



    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    

    

    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="week-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Week 02 <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="week-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/01/answers">Week 01</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/02/answers">Week 02</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/03/answers">Week 03</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/answers">Week 04</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/05/answers">Week 05</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/06/answers">Week 06</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/07/answers">Week 07</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/08/answers">Week 08</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/answers">Week 09</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/10/answers">Week 10</a>
    </div>
</span>



    
        
        
        
        
    

    
        
        
        
        
    

    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="tlb-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Tutorial <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="tlb-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/02/answers">Tutorial</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/02/answers">Laboratory</a>
    </div>
</span>



    
    
    
    

    
    
    
    



<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="qa-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Sample Answers <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="qa-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/02/questions">Questions</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/02/answers">Sample Answers</a>
    </div>
</span>


</div>

<div class="col-3 text-right">
<a class="heading_link" target="_blank" id="right_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>


</div>


<div class="tutlab tut">
<ol>

<li>
Imagine that we have just typed a shell script into the file
<code>my_first_shell_script.sh</code> in the current directory.
We then attempt to execute the script and observe the following:

<pre class="command_line"><kbd class="shell">my_first_shell_script.sh</kbd>
my_first_shell_script.sh: command not found
</pre>

Explain the possible causes for this, and describe how to rectify them.

<div class="answer">

<ul>
<li>
    <b>problem:</b> you might not have the current directory in your <code>PATH</code>
    <br>
    <b>solution:</b> add <code>.</code> to the end of your <code>PATH</code> (via
    <code>PATH=$PATH:.</code>) <br>
        &nbsp; &nbsp; <em>or</em> type the command name as <code>./my_first_shell_script.sh</code>
</li>
<li>
    <b>problem:</b> the <code>my_first_shell_script.sh</code> file might not be executable <br>
    <b>solution:</b> make the file executable (via <code>chmod +x my_first_shell_script.sh</code>) <br>
        &nbsp; &nbsp; <em>or</em> execute it via the command <code>sh my_first_shell_script.sh</code>
    (also fixes the first problem)
</li>
<li>
    <b>problem:</b> you might have gotten the <code>#!/bin/sh</code> line wrong <br>
    <b>solution:</b> check the line to make sure there are no spurious spaces or
    spelling mistakes and then check that the shell is actually called
    <code>/bin/sh</code> on your system

</li><li>
    <b>problem:</b> the <code>my_first_shell_script.sh</code> file has been transferred from a
    Windows-based computer in binary mode, and there's a <code>^M</code>
    (<code>'\\r'</code> in the C context) after <code>/bin/sh</code><br>
    <b>solution:</b> run the standard command <code>dos2unix MyScript</code>
    which will remove the pesky <code>^M</code>s.
</li>
</ul>

<p>
Note that some of these problems might also result in the message:
<code>my_first_shell_script.sh: Permission denied</code>, depending on which shell you're using.

</p></div>

</li><li>
Implement a shell script called <code>seq.sh</code> for writing sequences
of integers onto its standard output, with one integer per line.
The script can take up to three arguments, and behaves as follows:

<ul>

<li>
<b>seq.sh <i>LAST</i></b> writes all numbers from 1 up to <b><i>LAST</i></b> inclusive, for example:


    
        
    





<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">./seq.sh 5</kbd>
1
2
3
4
5
</pre>
</li>
<li>
<b>seq.sh <i>FIRST LAST</i></b> writes all numbers from <b><i>FIRST</i></b> up to <b><i>LAST</i></b> inclusive, for example:


    
        
    





<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">./seq.sh 2 6</kbd>
2
3
4
5
6
</pre>

</li>
<li> <b>seq <i>FIRST INCREMENT LAST</i></b>
    &nbsp; writes the sequence <b><i>FIRST</i></b>, <b><i>FIRST + INCREMENT</i></b>, <b><i>FIRST + 2 * INCREMENT</i></b>, up to <b><i>p</i></b> <br>
    (where <b><i>p</i></b> is the largest integer in this sequence
         that is less than or equal to <b><i>LAST</i></b>), for example:


    
        
    





<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">./seq.sh 3 5 24</kbd>
3
8
13
18
23
</pre>
</li>
</ul>

<div class="answer">
Sample solution for seq.sh






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh
# Write the sequence of integers specified by command<span class="token operator">-</span>line arguments
# <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>seq provides similar functionality on Linux

<span class="token keyword">if</span> test $# <span class="token operator">=</span> <span class="token number">1</span>
then
    first<span class="token operator">=</span><span class="token number">1</span>
    increment<span class="token operator">=</span><span class="token number">1</span>
    last<span class="token operator">=</span>$<span class="token number">1</span>
elif test $# <span class="token operator">=</span> <span class="token number">2</span>
then
    first<span class="token operator">=</span>$<span class="token number">1</span>
    increment<span class="token operator">=</span><span class="token number">1</span>
    last<span class="token operator">=</span>$<span class="token number">2</span>
elif test $# <span class="token operator">=</span> <span class="token number">3</span>
then
    first<span class="token operator">=</span>$<span class="token number">1</span>
    increment<span class="token operator">=</span>$<span class="token number">2</span>
    last<span class="token operator">=</span>$<span class="token number">3</span>
<span class="token keyword">else</span>
    cat <span class="token operator">&lt;</span><span class="token operator">&lt;</span>EOI
Usage<span class="token punctuation">:</span>
  $<span class="token number">0</span> last         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> prints numbers <span class="token keyword">in</span> range <span class="token number">1.</span><span class="token punctuation">.</span>last
  $<span class="token number">0</span> first last      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> prints numbers <span class="token keyword">in</span> range first<span class="token punctuation">.</span><span class="token punctuation">.</span>last
  $<span class="token number">0</span> first <span class="token number">2</span>nd last  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> prints numbers first<span class="token punctuation">,</span><span class="token number">2</span>nd<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span>last
                    <span class="token punctuation">(</span>using difference between first and
                     <span class="token number">2</span>nd as the increment<span class="token punctuation">)</span>
EOI
   exit <span class="token number">1</span>
fi

<span class="token keyword">if</span> test $increment <span class="token operator">-</span>lt <span class="token number">1</span>
then
    echo <span class="token string">"$0: invalid increment value: $increment"</span>
    exit <span class="token number">1</span>
fi

i<span class="token operator">=</span>$first
<span class="token keyword">while</span> test $i <span class="token operator">-</span>le $last
<span class="token keyword">do</span>
    echo $i
    i<span class="token operator">=</span>`expr $i <span class="token operator">+</span> $increment`
done</code></pre>





Another sample solution for seq.sh






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash
# Write the sequence of integers specified by command<span class="token operator">-</span>line arguments
# <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>seq provides similar functionality on Linux

# The bash<span class="token operator">-</span>specific syntax <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> is used <span class="token keyword">for</span> arithmetic
# This increases the readability but reduces the portability

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>$# <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
then
    first<span class="token operator">=</span><span class="token number">1</span>
    increment<span class="token operator">=</span><span class="token number">1</span>
    last<span class="token operator">=</span>$<span class="token number">1</span>
elif <span class="token punctuation">(</span><span class="token punctuation">(</span>$# <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
then
    first<span class="token operator">=</span>$<span class="token number">1</span>
    increment<span class="token operator">=</span><span class="token number">1</span>
    last<span class="token operator">=</span>$<span class="token number">2</span>
elif <span class="token punctuation">(</span><span class="token punctuation">(</span>$# <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
then
    first<span class="token operator">=</span>$<span class="token number">1</span>
    increment<span class="token operator">=</span>$<span class="token number">2</span>
    last<span class="token operator">=</span>$<span class="token number">3</span>
<span class="token keyword">else</span>
    cat <span class="token operator">&lt;</span><span class="token operator">&lt;</span>EOI
Usage<span class="token punctuation">:</span>
  $<span class="token number">0</span> last         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> prints numbers <span class="token keyword">in</span> range <span class="token number">1.</span><span class="token punctuation">.</span>last
  $<span class="token number">0</span> first last      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> prints numbers <span class="token keyword">in</span> range first<span class="token punctuation">.</span><span class="token punctuation">.</span>last
  $<span class="token number">0</span> first <span class="token number">2</span>nd last  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> prints numbers first<span class="token punctuation">,</span><span class="token number">2</span>nd<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span>last
                    <span class="token punctuation">(</span>using difference between first and
                     <span class="token number">2</span>nd as the increment<span class="token punctuation">)</span>
EOI
   exit <span class="token number">1</span>
fi

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>increment <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
then
    echo <span class="token string">"$0: invalid increment value: $increment"</span>
    exit <span class="token number">1</span>
fi

i<span class="token operator">=</span>$first
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> last<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">do</span>
    echo $i
    i<span class="token operator">=</span>$<span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> increment<span class="token punctuation">)</span><span class="token punctuation">)</span>
done</code></pre>




</div>

</li><li>
Write a shell script, <b>no_blinking.sh</b>, which removes all HTML files in the current directory which use the
<a href="https://en.wikipedia.org/wiki/Blink_element">blink element</a>:

<pre class="command_line"><kbd class="shell">no_blinking.sh</kbd>
Removing old.html because it uses the &lt;blink&gt; tag
Removing evil.html because it uses the &lt;blink&gt; tag
Removing bad.html because it uses the &lt;blink&gt; tag
</pre>

<div class="answer">






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh
# Removes all HTML files <span class="token keyword">in</span> the current directory which use <span class="token operator">&lt;</span>blink<span class="token operator">&gt;</span>

<span class="token keyword">for</span> file <span class="token keyword">in</span> <span class="token operator">*</span><span class="token punctuation">.</span>html
<span class="token keyword">do</span>
    # note use of <span class="token operator">-</span>i to ignore case and <span class="token operator">-</span>w to ignore white space
    # however tags containing newlines won't be detected
    <span class="token keyword">if</span> egrep <span class="token operator">-</span>iw <span class="token string">'&lt;/?blink&gt;'</span> $file <span class="token operator">&gt;</span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span>
    then
        echo  <span class="token string">"Removing $file because it uses the &lt;blink&gt; tag"</span>
        rm <span class="token string">"$file"</span>
    fi
done</code></pre>





</div>

Modify the shell script to instead take the HTML files to be checked as command line arguments and
instead of removing them, add the suffix <b>.bad</b> to their name.
<pre class="command_line"><kbd class="shell">no_blinking.sh awful.html index.html terrible.html </kbd>
Renaming awful.html to awful.html.bad because it uses the &lt;blink&gt; tag
Renaming terrible.html to terrible.html.bad because it uses the &lt;blink&gt; tag
</pre>

<div class="answer">






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh
# Removes all HTML files supplied as argument which use <span class="token operator">&lt;</span>blink<span class="token operator">&gt;</span>

<span class="token keyword">for</span> file <span class="token keyword">in</span> <span class="token string">"$@"</span>
<span class="token keyword">do</span>
    # note use of <span class="token operator">-</span>i to ignore case and <span class="token operator">-</span>w to ignore white space
    # however tags containing newlines won't be detected
    <span class="token keyword">if</span> egrep <span class="token operator">-</span>iw <span class="token string">'&lt;/?blink&gt;'</span> <span class="token operator">&gt;</span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span>
    then
        echo  <span class="token string">"Rename $file to $file.bad because it uses the &lt;blink&gt; tag"</span>
        mv <span class="token string">"$file"</span> <span class="token string">"$file.bad"</span>
    fi
done</code></pre>





</div>


</li><li>
Write a shell script, <b>list_include_files.sh</b>, which for all the C source files (<code>.c</code> files)
in the current directory prints the names of the files they include  (<code>.h</code> files), for example

<pre class="command_line"><kbd class="shell">list_include_files.sh</kbd>
count_words.c includes:
    stdio.h
    stdlib.h
    ctype.h
    time.h
    get_word.h
    map.h
get_word.c includes:
    stdio.h
    stdlib.h
map.c includes:
    get_word.h
    stdio.h
    stdlib.h
    map.h
</pre>

<div class="answer">






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh
# list the files included by the C sources files included as arguments

<span class="token keyword">for</span> file <span class="token keyword">in</span> <span class="token operator">*</span><span class="token punctuation">.</span>c
<span class="token keyword">do</span>
    echo <span class="token string">"$file includes:"</span>
    egrep <span class="token string">'^#include'</span> <span class="token string">"$file"</span><span class="token operator">|</span>  # find '#include lines
    sed 's<span class="token operator">/</span><span class="token punctuation">[</span><span class="token string">"&gt;][^"</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">*</span>$<span class="token comment">//'|      # remove the last '"' or '&gt;' and anything after it</span>
    sed <span class="token string">'s/^.*["&lt;]/    /'</span>       # remove the first <span class="token string">'"'</span> or <span class="token string">'&gt;'</span> and anything before it
done</code></pre>





</div>

</li><li>
Consider the following columnated (space-delimited) data file
containing contact information for various CSE academic staff:
<p>
</p><pre>G Heiser       Newtown      9381-1234
S Jha          Kingsford    9621-1234
C Sammut       Randwick     9663-1234
R Buckland     Randwick     9663-9876
J A Shepherd   Botany       9665-4321
A Taylor       Glebe        9692-1234
M Pagnucco     North Ryde   9868-6789
</pre>
<p>
</p><div class="note1">
<b>Note:</b> This data is fictitious. Do not ring these phone numbers.
I have no idea whether they are real or not, but they are
certainly not the correct phone numbers for the academic staff
mentioned.
</div>

The data is currently sorted in phone number order.
Can we use the <code>sort</code> filter to re-arrange the data into
"telephone-book" order?
If not, how would we need to change the file in order to
achieve this?
<div class="answer">
No. We need to sort based on the family name field, but this occurs
in different positions on each line of the file, depending how many
initials the person has.
<p>
If not, how would we need to change the file in order to
achieve this?
</p><p>
We need to make sure that the family name occurs in the same
"field" on each line.
One possiblity, make it the first field in each line, e.g.
</p><pre>Keller G       Newtown      9381-1234
Wilson W H     Kingsford    9621-1234
...
</pre>
<p>
Another possibility, make sure that the initials form a single
field, e.g.
</p><pre>G. Keller      Newtown      9381-1234
W.H. Wilson    Kingsford    9621-1234
...
</pre>
</div>
</li><li>
Consider the Unix password file (<code>/etc/passwd</code>):
<p>
</p><pre>root:ZHolHAHZw8As2:0:0:root:/root:/bin/bash
jas:iaiSHX49Jvs8.:100:100:John Shepherd:/home/jas:/bin/bash
andrewt:rX9KwSSPqkLyA:101:101:Andrew Taylor:/home/andrewt:/bin/cat
postgres::997:997:PostgreSQL Admin:/usr/local/pgsql:/bin/bash
oracle::999:998:Oracle Admin:/home/oracle:/bin/bash
cs2041:rX9KwSSPqkLyA:2041:2041:COMP2041 Material:/home/cs2041:/bin/bash
cs3311:mLRiCIvmtI9O2:3311:3311:COMP3311 Material:/home/cs3311:/bin/bash
cs9311:fIVLdSXYoVFaI:9311:9311:COMP9311 Material:/home/cs9311:/bin/bash
cs9314:nTn.JwDgZE1Hs:9314:9314:COMP9314 Material:/home/cs9314:/bin/bash
cs9315:sOMXwkqmFbKlA:9315:9315:COMP9315 Material:/home/cs9315:/bin/bash
</pre>
<p>
Provide a command that would produce each of the following results:
</p><ol type="a">

<li> display the first three lines of the file </li>

<li> display lines belonging to class accounts  <br>
<small>(assume that their login name
starts with either "cs", "se", "bi" or "en", followed by a digit)</small> </li>

<li> display the user name of everyone whose shell is <code>/bin/bash</code> </li>

<li> create a tab-separated file <code>passwords.txt</code> containing
only login name and password for all users </li>
</ol>

<div class="answer">
<ol type="a">

<li> <code>head -3 /etc/passwd</code> </li>

<li> <code>egrep '^(cs|se|bi|en)[0-9]' /etc/passwd</code> </li>
<li> <code>egrep '/bin/bash' /etc/passwd | cut -d':' -f1</code> </li>
<p>or a more accurate version that restricts the search to the right field:
</p><p><code>cut -d':' -f1,7 /etc/passwd | egrep ':/bin/bash' | cut -d':' -f1</code>
</p><li> <code>cut -d':' -f1,2 /etc/passwd | tr ':' '\t' &gt; passwords.txt</code> </li>
</ol>
</div>

</li><li>
The following shell script emulates the <code>cat</code> command using
the built-in shell commands <code>read</code> and <code>echo</code>.

<pre>#!/bin/sh
while read line
do
    echo "$line"
done
</pre>

<ol type="a">
<li> what are the differences between the above script and the real
    <code>cat</code> command? </li>
<li> modify the script so that it can concatenate multiple files
    from the command line, like the real <code>cat</code> </li>
</ol>
<p>
(Hint: shell control structures (e.g. <code>if</code>,
<code>while</code>, <code>for</code>) are commands in their
own right and can form a component of a pipeline)
</p><div class="answer">
<ol type="a">
<li> Some differences
<ul>
<li> the script doesn't concatenate files named on the command line,
    just standard input </li>
<li> it doesn't implement all of the <code>cat</code> options </li>
<li> the appearance of lines may be altered (space at start of
    line is removed, and runs of multiple spaces will be
    compressed to a single space) </li>
</ul> </li>
<li>
<p>Shell script to concatenate multiple files specified on command line:
</p><pre class="program answer">#!/bin/sh
for f in "$@"
do
    if [ ! -r "$f" ]
    then
        echo "No such file: $f"
    else
        while read line
        do
            echo "$line"
        done &lt;$f
    fi
done
</pre>
</li></ol>
</div>
</li><li>
The <code>gzip</code> command compresses a text file and renames it
to <code>oldName.gz</code>. The <code>zcat</code> command takes the
name of a single compressed file as its argument and writes the
original (non-compressed) text to its standard output.
<p>
Write a shell script called <code>zshow</code> that takes multiple
<code>.gz</code> file names as its arguments, and displays the
original text of each file, separated by the name of the file.
</p><p>
Consider the following example execution of <code>zshow</code>:
</p><pre>   <kbd class="shell">zshow a.gz b.gz bad.gz c.gz</kbd>
   ===== a =====
   <i>... original contents of file "a" ...</i>
   ===== b =====
   <i>... original contents of file "b" ...</i>
   ===== bad =====
   No such file: bad.gz
   ===== c =====
   <i>... original contents of file "c" ...</i>
</pre>
<div class="answer">
<p>A simple solution which aims to make things obvious
</p><pre class="program answer">#!/bin/sh
for f in "$@"   # for each command line arg
do
    f1=`echo $f | sed -e 's/\.gz//'`
    echo "===== $f1 ====="
    if test ! -r "$f"   # is the arg readable?
    then
        echo "No such file: $f"
    else
        zcat "$f"
    fi
done
</pre>

A solution that aims to be more robust

<pre class="program answer">#!/bin/sh
for f in "$@"  # iterates over command line args
do
    f1=`echo $f | sed 's/\.gz//'`
    echo "===== $f1 ====="
    if test ! -r "$f"   # is the arg readable?
    then
        echo "No such file: $f"
    else
        ftype=`file -b $f | sed 's/ //'`
        if [ "$ftype" != "gzip" ]
            echo "Incorrect file type: $f"
        else
            zcat "$f"
        fi
    fi
done
</pre>

Notice that robustness typically adds a significant amount
of code. The extra code is definitely worth it.
<p>
The <code>file</code> command tells you what kind of file
its argument is.
If you don't know why we need to pipe its output through
<code>sed</code>, read the relevant manual entries.
</p></div>
</li><li>
Consider the marks data file from last week's tutorial,
and assume that it is stored
in a file called <code>Marks</code>.
<pre>2111321 37 FL
2166258 67 CR
2168678 84 DN
2186565 77 DN
2190546 78 DN
2210109 50 PS
2223455 95 HD
2266365 55 PS
...
</pre>
Assume also that we have a file
called <code>Students</code> that contains the names and student ids
of for all students in the class, e.g.
<pre>2166258 Chen, X
2186565 Davis, PA
2168678 Hussein, M
2223455 Jain, S
2190546 Phan, DN
2111321 Smith, JA
2266365 Smith, JD
2210109 Wong, QH
...
</pre>
Write a shell script that produces a list of names and their
associated marks, sorted by name, e.g.
<pre>67 Chen, X
77 Davis, PA
84 Hussein, M
95 Jain, S
78 Phan, DN
37 Smith, JA
55 Smith, JD
50 Wong, QH
</pre>
<p>
Note: there are many ways to do this, generally involving
combinations of filters such as <code>cut</code>, <code>egrep</code>,
<code>sort</code>, <code>join</code>, etc.
Try to think of more than one solution and discuss the merits of
each.
</p><div class="answer">
<p>
One obvious strategy, iterate over the <code>Students</code> file
using the shell's <code>read</code> command. We iterate over
<code>Students</code>
rather than <code>Marks</code>, since it's already in the order we want;
we could iterate the other way, but then we'd have to sort the output
afterwards.
For each student, we
can use <code>egrep</code> and <code>cut</code> (or <code>sed</code> or
<code>awk</code> or <code>perl</code>) to extract their information from the <code>Marks</code>
file
</p><pre class="program answer">#!/bin/sh
while read sid name init
do
    mark=`egrep $sid Marks | cut -d' ' -f2`
    echo $mark $name $init
done &lt;Students
</pre>
<p>
For the minimalists (and Haskell lovers), here's a one-liner:
</p><pre>#!/bin/sh
sort Students | join Marks - | sort -k4 | cut -d' ' -f2,4,5
</pre>
<p>
Note the use of the <code>-</code> to make the second argument to
<code>join</code> come from standard input. Without this mechanism,
we would need to create a temporary file containing a sorted copy
of <code>Students</code>.
</p></div>
</li><li>
<p>
Implement a shell script called <code>grades.sh</code> that reads a sequence
of (studentID, mark) pairs from its standard input and writes
(studentID, grade) pairs to its standard output.
The input pairs are written on a single line, separated by spaces,
and the output should use a similar format.
The script should also check whether the second value on each line
looks like a valid grade, and output an appropriate message if it
doesn't.
The script can ignore any extra data occuring after the mark on each line.
</p><p>
Consider the following input and corresponding output to the
program:
</p><p>
</p><table cellpadding="10">
<tbody><tr> <td><b>Input</b></td> <td>&nbsp;</td> <td><b>Output</b></td> </tr>
<tr>
<td>
<pre>2212345 65
2198765 74
2199999 48
2234567 50 ok
2265432 99
2121212 hello
2222111 120
2524232 -1
</pre>
</td>
<td>&nbsp;</td>
<td>
<pre>2212345 CR
2198765 CR
2199999 FL
2234567 PS
2265432 HD
2121212 ?? (hello)
2222111 ?? (120)
2524232 ?? (-1)
</pre>
</td>
</tr>
</tbody></table>
<p>
To get you started, here is a framework for the script:
</p><pre>#!/bin/sh
while read id mark
do
    # <i>insert mark/grade checking here</i>
done
</pre>
<p>
Note that the shell's <code>read</code> operation assumes that the
components on each input line are separated by spaces.
How could we use this script if the data was supplied in a file
that used commas to separate the (studentID, mark) components,
rather than spaces?
</p><div class="answer">
<p>
Since the "mark to grade mapping problem" is a standard
problem in first year tutes, working out the algorithm
should not pose any problems.
Hopefully the only tricky thing is getting the shell syntax right.
The main aim of the exercise is to write a multiway selection
statement.
</p><p>
We supply two solutions, one using <code>if</code>, the other using
<code>case</code>. The <code>if</code> one is more natural for people
who know how to program in languages like Java. The <code>case</code>
version requires us to develop patterns to match all the possible
inputs.
</p><p>
The <code>case</code> construct is a nice way for checking strings via
patterns. The pattern used here catches both non-numbers and negative
numbers (they start with a minus rather than a digit). Unfortunately,
the <code>test</code> command doesn't support pattern-matching.
</p><p>
Shell supports a C-style <code>continue</code> construct for loops, which
is used here to prevent processing non-numeric "mark" fields.
</p><p>
All of the bracket-style (<code>[...]</code>) syntax for tests could be replaced by
the more conventional syntax for the <code>test</code> command, e.g.
<code>test $mark -lt 50</code>.
</p><p>
Note that the <code>read</code> statement has 2 arguments to ensure that
the mark is bundled in with the optional comment on each data line.
</p><pre class="program answer">#!/bin/sh
while read stid mark extras
do
        case "$mark" in
        [0-9]*) ;;
        *)      echo "$stid ?? ($mark)"
                continue
                ;;
        esac
        if test $mark -lt 50
        then
                echo $stid FL
        elif test $mark -lt 65
        then
                echo $stid PS
        elif test $mark -lt 75
        then
                echo $stid CR
        elif test $mark -lt 85
        then
                echo $stid DN
        elif test $mark -le 100
    then
                echo $stid HD
    else
        echo "$stid ?? ($mark)"
        fi
done
</pre>
<p>
Another possibility would to use <code>case</code> patterns to match
the correct ranges of values, but this assumes that all marks are
integer values. Floating point values could also be handled, but
at the cost of making the patterns more complex. Also, this approach
wouldn't scale up to arbitrary ranges of integers; it would
become to messy to specify patterns for all possible numbers.
</p><pre class="program answer">#!/bin/sh
while read stid mark extras
do
        case "$mark" in
        [0-9] | [0-4][0-9])
        echo $stid FL ;;
    5[0-9] | 6[0-4])
                echo $stid PS ;;
    6[5-9] | 7[0-4])
                echo $stid CR ;;
        7[5-9] | 8[0-4])
                echo $stid DN ;;
        8[5-9] | 9[0-9] | 100)
                echo $stid HD ;;
        *)
        echo "$stid ?? ($mark)" ;;
    esac
done
</pre>
If the input file used comma as a separator, the easiest thing
would be to run the input through <code>tr</code> to convert the
commas to spaces and pipe the output into the <code>grades</code>
program e.g.
<pre>tr ',' ' ' &lt;data | grades
</pre>
Alternatively, you could alter the shell's field separator via
<pre>IFS=,
</pre>
</div>
</li><li>
Write a shell script <code>time_date.sh</code> that prints the time and date
once an hour.  It should do this until a new month is reached.
<p>
Reminder the <code>date</code> command produces output like this:

</p><pre>Friday 5 August  17:37:01 AEST 2016
</pre>

<div class="answer">
Sample solution for time_date.sh:
<pre class="program answer">#!/bin/sh

start_month=`date | cut -d' ' -f3` # or use options to date, e.g. date +%m
while test $start_month = `date | cut -d' ' -f3`
do
    date
    sleep 3600 # i.e. one hour
done
</pre>
Normally, we would double-quote like this:
<pre>while test "$start_month" = "`date | cut -d' ' -f3`"</pre>
but this is not needed since the month does not contain spaces
</div>
</li><li>
<p>
Consider a scenario where we have a directory containing two LaTeX
files, <code>a.tex</code> and <code>b.tex</code>. The file
<code>a.tex</code> is 20 lines long, and <code>b.tex</code> is
30 lines long.
What is the effect of each of the commands below?
How will their output differ?
</p>
<pre class="command_line"><kbd class="shell">wc -l *.tex</kbd>
<kbd class="shell">echo `wc -l *.tex`</kbd>
</pre>
<div class="answer">
<p>
The first command counts the number of lines in each file and writes
this data out, one file per line, followed by a total.
The result:
</p>
<pre class="command_line"><kbd class="shell">wc -l *.tex</kbd>
 20 a.tex
 30 b.tex
 50 total
</pre>
<p>
The second command starts out doing exactly the same thing as the
first: counting lines in the two files. However, because of the
backquotes, its output is written to a single string which is then
taken by the shell and passed as arguments to the <code>echo</code>
command. In the process of capturing the output, it is trimmed of
trailing newlines. By the time the shell has processed it further
and it is fed as arguments to the <code>echo</code> command, all
newlines have been removed, and it becomes a sequence of words.
The <code>echo</code> a single space.
</p>
<pre class="command_line"><kbd class="shell">echo `wc -l *.tex`</kbd>
20 a.tex 30 b.tex 50 total
</pre>
</div>
</li><li>
<p>
Write a shell script that displays the name and size of all files
in the current directory that are bigger than (say) 100,000 bytes.
</p>
<p>
(Hint: use <code>wc</code> to do the counting, and capture its output
using back-ticks. How do you get rid of the file name and/or line
and word counts?)
</p>
<div class="answer">
<pre class="C answer">#!/bin/sh
LIMIT=100000
for f in *
do
    bytes=`wc -c &lt;"$f"`
    if test $bytes -gt $LIMIT
    then
        echo "$f has $bytes bytes"
    fi
done
</pre>
</div>

</li><li>
What is the output of each of the following pipelines if the text
<pre>this is big Big BIG
but this is not so big
</pre>
is supplied as the initial input to the pipeline?
<ol type="a">
<li> <code>tr -d ' ' | wc -w</code>
<div class="answer">
This pipeline deletes (<code>-d</code>) all of the blanks
between words, thus compressing each line into a single long word,
which means that the number of words is the same as the number of
lines (i.e. 2).
</div> </li>
<li> <code>tr -cs 'a-zA-Z0-9' '\n' | wc -l</code>
<div class="answer">
This splits the input up so that there is one word of input on
each line of output; counting the number of output lines, thus
also counts the total number of words in the text (i.e. 11).
</div> </li>
<li> <code>tr -cs 'a-zA-Z0-9' '\n' | tr 'a-z' 'A-Z' | sort | uniq -c</code>
<div class="answer">
This splits the input into words, then normalises them (by mapping
all words to all upper-case), then counts the number of occurences
of each distinct word. The output looks like:
<pre>      4 BIG
      1 BUT
      2 IS
      1 NOT
      1 SO
      2 THIS
</pre>
</div> </li>
</ol>
</li><li>
Consider the standard "split-into-words" technique from the
previous question:
<pre>tr -c -s 'a-zA-Z0-9' '\n' &lt; <i>someFile</i>
</pre>
Explain how this command works (i.e. what does each argument do)
<div class="answer">
 <ul>
 <li> -c = 'complement' so it replaces everything NOT in string 1 with string 2 </li>
 <li> -s = 'squeeze' repeated characters, so it replaces any duplicate newlines with just one </li>
 <li> the string <code>'a-zA-Z0-9'</code> is shorthand for the string of
    all alphahnumeric characters
<pre>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
</pre> </li>
</ul></div>
</li><li>
Assume that we are in a shell where the following shell variable
assignments have been performed, and <code>ls</code> gives the following
result:
<pre class="command_line"><kbd class="shell">x=2  y='Y Y'  z=ls</kbd>
<kbd class="shell">ls</kbd>
    a       b       c
</pre>
What will be displayed as a result of the following <code>echo</code>
commands:
<p>
</p><ol type="a">
<li> <pre class="command_line"><kbd class="shell">echo a &nbsp; b &nbsp; c</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">echo "a &nbsp; b &nbsp; c"</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">echo $y</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">echo x$x</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">echo $xx</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">echo "$y"</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">echo '$y'</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">echo `$y`</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">echo `$z`</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">echo `echo a b c`</kbd></pre> </li>
</ol>
<div class="answer">
The aim of this question is to clarify notions about command line
arguments and the various transformations that the shell performs
on the command line before executing it.
<p>
Recall that the shell performs command and variable substitution
before splitting the command line into separate words to make up
the arguments. Single-quotes and double-quotes perform a grouping
function that overrrides the normal word-splitting.
</p><p>
</p><table cellpadding="10">
<tbody><tr> <th>Command + Output</th><th>Explanation
</th></tr><tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo a &nbsp; b &nbsp; c</kbd>
<samp>a b c</samp></pre></td><td>
  Spaces between arguments are not preserved;
  <code>echo</code> uses only one space between args
  </td>
</tr>
<tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo "a &nbsp; b &nbsp; c"</kbd>
<samp>a &nbsp; b &nbsp; c</samp></pre></td><td>
  Spaces are preserved because the quotes turns
  <code>"a  b  c"</code> into a single argument
  </td>
</tr>
<tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo $y</kbd>
<samp>Y Y</samp></pre></td><td>
  <code>$y</code> expands into two separate args
  </td>
</tr>
<tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo x$x</kbd>
<samp>x2</samp></pre></td><td>
  <code>$x</code> expands to <code>2</code> and is appended
  after the letter <code>x</code>
  </td>
</tr>
<tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo $xx</kbd>
<samp>&nbsp;</samp></pre></td><td>
  <code>$xx</code> is treated as a reference to the
  shell variable <code>xx</code>; since there is
  no such variable, it expands to the empty string
  </td>
</tr>
<tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo "$y"</kbd>
<samp>Y Y</samp></pre></td><td>
  <code>$y</code> expands into a single argument
  </td>
</tr>
<tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo '$y'</kbd>
<samp>$y</samp></pre></td><td>
  the single quotes prevent variable expansion
  </td>
</tr>
<tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo `$y`</kbd>
<samp>Y: command not found</samp></pre></td><td>
  <code>$y</code> expands to <code>Y Y</code> which is then
  executed as a command because of the backquotes;
  since there is no command <code>Y</code>, the error
  message follows
  </td>
</tr>
<tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo `$z`</kbd>
<samp>a b c</samp></pre></td><td>
  <code>$z</code> expands to <code>ls</code> which is then
  executed as a command, giving the names of the
  files in the current directory, which are treated
  as three separate args
  </td>
</tr>
<tr>
  <td valign="top"><pre class="command_line"><kbd class="shell">echo `echo a b c`</kbd>
<samp>a b c</samp></pre></td><td>
  the inner <code>echo</code> command is executed, giving <code>a b c</code>
  which are passed as arguments to the outer <code>echo</code>
  </td>
</tr>
</tbody></table>
</div>
</li><li>
The following C program and its equivalent in Java both aim to give precise
information about their command-line arguments.
<p>
<b>C:</b>
</p><pre class="program">// Display command line arguments, one per line
#include &lt;stdio.h&gt;
int main(int argc, char *argv[]) {
    int i;
    printf("#args  = %d\n", argc-1);
    for (i = 1; i &lt; argc; i++)
        printf("arg[%d] = \"%s\"\n", i, argv[i]);
    return 0;
}
</pre>
<b>Java:</b>
<pre class="program">public class args {
    public static void main(String args[]) {
        System.out.println("#args  = " + args.length);
        for (int i = 0; i &lt; args.length; i++)
            System.out.println("arg[" + (i+1) + "] = \"" + args[i] + "\"");
    }
}
</pre>
Assuming that the C program is compiled into a command called <code>args</code>,
consider the following examples of how it operates:
<pre class="command_line"><kbd class="shell">args a b c</kbd>
#args  = 3
arg[1] = "a"
arg[2] = "b"
arg[3] = "c"
<kbd class="shell">args "Hello there"</kbd>
#args  = 1
arg[1] = "Hello there"
</pre>

Assume that we are in a shell where the following shell variable
assignments have been performed.
<pre class="command_line"><kbd class="shell">x=2  y='Y Y'  z=ls</kbd>
</pre>
Assume that we are in a shell with the same variable assignments
and the same current directory as the previous question.
What will be the output of  the following:
<p>
</p><ol type="a">
<li> <pre class="command_line"><kbd class="shell">args x y &nbsp; z</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">args `ls`</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">args $y</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">args "$y"</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">args `echo "$y"`</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">args $x$x$x</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">args $x$y</kbd></pre> </li>
<li> <pre class="command_line"><kbd class="shell">args $xy</kbd></pre> </li>
</ol>
<div class="answer">
This question has a similar aim to the previous one, but now we need
to be more precise about what are the actual arguments that are being
passed to the command. Note that we place double quotes around each argument so that we can
see <em>exactly</em> what's contained in the argument, including any
embedded spaces.

<table cellpadding="10" class="table">
<tbody><tr> <th width="40%">Command+Output</th><th>Explanation
</th></tr><tr>
<td valign="top"><pre class="command_line"><kbd class="shell">args x y z</kbd><samp>
#args  = 3
arg[1] = "x"
arg[2] = "y"
arg[3] = "z"
</samp></pre></td>
  <td valign="top">
  Each of the letters is a single argument
  (separated by spaces).
  </td>
</tr>
<tr>
<td valign="top"><pre class="command_line"><kbd class="shell">args `ls`</kbd>
#args  = 3
arg[1] = "a"
arg[2] = "b"
arg[3] = "c"
  </pre></td>
  <td valign="top">
  The <code>ls</code> command is executed and its output
  is interploated into the command line; the shell
  then splits the command-line into arguments.
  </td>
</tr>
<tr>
<td valign="top"><pre class="command_line"><kbd class="shell">args $y</kbd>
#args  = 2
arg[1] = "Y"
arg[2] = "Y"
</pre></td>
  <td valign="top">
  <code>$y</code> expands to the string <code>Y&nbsp;Y</code>;
  when the shell splits the line into words, these two
  characters becomes separate args
  </td>
</tr>
<tr>
<td valign="top"><pre class="command_line"><kbd class="shell">args "$y"</kbd>
#args  = 1
arg[1] = "Y Y"
</pre></td>
  <td valign="top">
  <code>$y</code> expands to <code>Y&nbsp;Y</code> within the
  quotes, so it is treated as a single word when the
  shell breaks the line into args
  </td>
</tr>
<tr>
<td valign="top"><pre class="command_line"><kbd class="shell">args `echo $y`</kbd>
#args  = 2
arg[1] = "Y"
arg[2] = "Y"
</pre></td>
  <td valign="top">
  the command within the backquotes expands to <code>Y&nbsp;Y</code>,
  but since backquotes don't have a grouping function, the two
  <code>Y</code>'s are treated as separate arguments
  </td>
</tr>
<tr>
<td valign="top"><pre class="command_line"><kbd class="shell">args $x$x$x</kbd>
#args  = 1
arg[1] = "222"
</pre></td>
  <td valign="top">
  <code>$x</code> expands into <code>2</code>, which is
  concatenated with itself three times
  </td>
</tr>
<tr>
<td valign="top"><pre class="command_line"><kbd class="shell">args $x$y</kbd>
#args  = 2
arg[1] = "2Y"
arg[2] = "Y"
</pre></td>
  <td valign="top">
  <code>$x</code> expands to <code>2</code> and
  <code>$y</code> expands to <code>Y&nbsp;Y</code>;
  these two strings are concatenated to give <code>2Y&nbsp;Y</code>
  and when the shell splits the line into words, the second
  <code>Y</code> becomes an arg in its own right
  </td>
</tr>
<tr>
<td valign="top"><pre class="command_line"><kbd class="shell">args $xy</kbd>
#args  = 0
</pre></td>
  <td valign="top">
  there is no variable called <code>xy</code>, so <code>$xy</code>
  expands to the empty string, which vanishes when the shell
  splits the command line into words
  </td>
</tr>
</tbody></table>
</div>












</li></ol>
</div>





<footer class="mt-3 container text-center no-print">
<p class="text-muted">
<strong>COMP(2041|9044) 19T2: Software Construction</strong>
is brought to you by <br>
the <a href="https://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>
at the <a href="https://www.unsw.edu.au/">University of New South Wales</a>, Sydney.<br>
For all enquiries, please email the class account at
<a href="mailto:@cse.unsw.edu.au">cs2041@cse.unsw.edu.au</a><br>

<small>CRICOS Provider 00098G</small>
</p>



</footer>





</body></html>