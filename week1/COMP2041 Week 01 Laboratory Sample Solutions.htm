<!DOCTYPE html>
<!-- saved from url=(0055)https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/01/answers -->
<html lang="en" class="gr__cgi_cse_unsw_edu_au"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<title>

COMP2041 Week 01 Laboratory Sample Solutions

</title>




<!-- <link href="/~cs2041/19T2/flask.cgi/static/bootstrap.min.css" rel="stylesheet"> -->
<link rel="stylesheet" href="./COMP2041 Week 01 Laboratory Sample Solutions_files/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link href="./COMP2041 Week 01 Laboratory Sample Solutions_files/course.css" rel="stylesheet">
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/jquery.min.js"></script> -->
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/bootstrap.min.js"></script> -->

<script src="./COMP2041 Week 01 Laboratory Sample Solutions_files/jquery-3.3.1.min.js"></script>
<script src="./COMP2041 Week 01 Laboratory Sample Solutions_files/popper.min.js"></script>
<script src="./COMP2041 Week 01 Laboratory Sample Solutions_files/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script type="text/javascript" src="./COMP2041 Week 01 Laboratory Sample Solutions_files/course.js"></script>

<!-- prism code-highligting -->
<link href="./COMP2041 Week 01 Laboratory Sample Solutions_files/prism.css" rel="stylesheet">
<!-- defer loading of prism.js script until DOM is loaded, as per PR #26 and https://stackoverflow.com/a/24070373 -->
<script type="text/javascript" src="./COMP2041 Week 01 Laboratory Sample Solutions_files/prism.js" defer=""></script>
<script async="" src="./COMP2041 Week 01 Laboratory Sample Solutions_files/ei.js"></script>

<link rel="canonical" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">
</head>
<body class="container" data-gr-c-s-loaded="true">




<div id="heading" class="row">


<div class="col-3 text-left">
<a class="heading_link" target="_blank" id="left_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>

<div class="col-6 text-center">



    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    

    

    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="week-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Week 01 <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="week-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/01/answers">Week 01</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/02/answers">Week 02</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/03/answers">Week 03</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/04/answers">Week 04</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/05/answers">Week 05</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/06/answers">Week 06</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/07/answers">Week 07</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/08/answers">Week 08</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/09/answers">Week 09</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/10/answers">Week 10</a>
    </div>
</span>



    
        
        
        
        
    

    
        
        
        
        
    

    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="tlb-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Laboratory <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="tlb-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/01/answers">Tutorial</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/01/answers">Laboratory</a>
    </div>
</span>



    
    
    
    

    
    
    
    



<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="qa-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Sample Solutions <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="qa-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/01/questions">Exercises</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/01/answers">Sample Solutions</a>
    </div>
</span>


</div>

<div class="col-3 text-right">
<a class="heading_link" target="_blank" id="right_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>


</div>


<div class="tutlab lab">




<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Objectives
            </h3>
        </div>
        <div class="card-body">

<ul>

<li>Understanding regular expressions</li>

<li>Understanding use of UNIX filters</li>

</ul>

</div>
    </div>



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Preparation
            </h3>
        </div>
        <div class="card-body">

Before the lab you should re-read the relevant lecture slides and their accompanying examples.


</div>
    </div>



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Getting Started
            </h3>
        </div>
        <div class="card-body">



Create a new directory for this lab called <code>lab01</code> and change to this directory with these comamnds:

<pre class="command_line"><kbd class="shell">mkdir lab01</kbd>
<kbd class="shell">cd lab01</kbd>
</pre>

</div>
    </div>







 


    
    



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Exercise: egrep-ing a Dictionary with egrep
            </h3>
        </div>
        <div class="card-body">











There is a template file named <code>dictionary_answers.txt</code> which you must use
to enter the answers for this exercise.
<p>



Download dictionary_answers.txt <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/dictionary/dictionary_answers.txt">here</a>, or copy it to your CSE
account using the following command:

</p><pre class="command_line"><kbd class="shell">cp -n /web/cs2041/19T2/activities/dictionary/dictionary_answers.txt .</kbd>
</pre>



The autotest scripts depend on the format of <code>dictionary_answers.txt</code> so just add your answers
don't otherwise change the file.  In other words edit <code>dictionary_answers.txt</code>:

<pre class="command_line"><kbd class="shell">gedit dictionary_answers.txt &amp;</kbd>
</pre>

On most Unix systems you will find one or more dictionaries containing many thousands of
words typically in the directories <code>/usr/share/dict/</code>.
<p>
We've created  a dictionary named <code>dictionary.txt</code> for this lab exercise.
</p><p>



Download dictionary.txt <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/dictionary/dictionary.txt">here</a>, or copy it to your CSE
account using the following command:

</p><pre class="command_line"><kbd class="shell">cp -n /web/cs2041/19T2/activities/dictionary/dictionary.txt .</kbd>
</pre>



    
        
    





<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">ls -l</kbd>
total 4
lrwxrwxrwx 1 cs2041 cs2041   17 May 30 17:42 dictionary.txt -&gt; ../dictionary.txt
-rw-r--r-- 1 cs2041 cs2041 1072 May 30 17:42 dictionary_answers.txt
</pre>

<ol>
<li>

Write an egrep command  that prints  the words in <code>dictionary.txt</code>
which contain in characters "lmn" consecutively.
<p>
<b>Hint</b>:  it should print:

    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Selmner
Selmner's
almner
almners
calmness
calmness's
calmnesses
</pre>
<p>
</p><div class="answer">
Sample answer:
<pre>egrep 'lmn' dictionary.txt</pre>
</div>

The COMP2041 class account contains a script named <b>autotest</b>
that automatically runs 1 or more tests on your lab exercises.
Once you have entered you answer for q1 you can check it like this:

<pre class="command_line"><kbd class="shell">2041 autotest dictionary q1</kbd>
Test q1 (egrep '^Q1 answer' dictionary_answers.txt|tail -1|sed 's/.*answer[: ]*//'|sh) - passed
1 tests passed 0 tests failed
</pre>

Passing the autotest doesn't guarantee your answer is correct, of course, but
it may find a mistake you've missed so run autotest for each of the following questions
when you've entered the answer in <code>dictionary_answers.txt</code>.

</li><li>

Write a shell pipeline  that prints the words that contain "zz", but do not end in apostrophe-s ('s)?
<p>
<b>Hint</b>:  it should print:


    
        
    





</p><pre class="command_line" style="max-height: 12em;overflow:  auto;">Abruzzi
Arezzini
Arezzo
Barozzi
Belshazzar
Brazzaville
Buzz
Buzzell
Cazzie
Chuzzlewit
Cozza
Cuzzart
Durazzo
Ezzo
Fabozzi
Fezzan
Fuzzbuster
Fuzzbusters
Gazza
Gazzo
Hizzoner
Hizzoners
Izzy
Jacuzzi
Jacuzzis
Kizzee
Kizzie
Lipizzan
Lipizzaner
Lipizzaners
Lipizzans
Lippizzaner
Lippizzaners
Lizzie
Lizzy
Matazzoni
Mazzini
Mezzogiorno
Mozza
Nebuchadnezzar
Nebuchadnezzars
Nebuchadrezzar
Nuzzi
Ozzie
Ozzies
Ozzy
Paolozzi
Peruzzi
Pestalozzi
Pestalozzian
Pirozzo
Pozzuoli
Pozzy
Prezzes
Regazzi
Rezzani
Rizzi
Rizzio
Rizzo
Suzzy
Tetrazzini
Uzzi
Uzzia
Uzzial
Uzziel
Verrazzano
Vezza
Vizza
Vizzone
Wozzeck
Zzz
abuzz
albizzia
albizzias
altezza
bazazz
bedazzle
bedazzled
bedazzlement
bedazzlements
bedazzles
bedazzling
belshazzar
belshazzars
bemuzzle
bemuzzled
bemuzzles
bemuzzling
bezazz
bezazzes
bezzant
bezzants
bezzazz
bezzle
bezzled
bezzles
bezzling
bizazz
bizzazz
bizzes
blizzard
blizzardly
blizzardous
blizzards
blizzardy
bozzetti
bozzetto
bumfuzzle
bumfuzzled
bumfuzzles
bumfuzzling
buzz
buzzard
buzzards
buzzbomb
buzzcut
buzzcuts
buzzed
buzzer
buzzers
buzzes
buzzing
buzzingly
buzzings
buzzsaw
buzzwig
buzzwigs
buzzword
buzzwords
buzzy
chazzan
chazzanim
chazzans
chazzen
chazzenim
chazzens
chiarezza
chizz
chizzed
chizzes
chizzing
cozzes
d'Arezzo
dazzle
dazzled
dazzlement
dazzler
dazzlers
dazzles
dazzling
dazzlingly
dazzlings
dizzard
dizzards
dizzied
dizzier
dizzies
dizziest
dizzily
dizziness
dizzinesses
dizzy
dizzying
dizzyingly
drizzle
drizzled
drizzles
drizzlier
drizzliest
drizzling
drizzlingly
drizzly
embezzle
embezzled
embezzlement
embezzlements
embezzler
embezzlers
embezzles
embezzling
fezzed
fezzes
fezzy
fizz
fizzed
fizzer
fizzers
fizzes
fizzgig
fizzgigs
fizzier
fizziest
fizzily
fizziness
fizzing
fizzings
fizzle
fizzled
fizzler
fizzlers
fizzles
fizzling
fizzy
frazzle
frazzled
frazzles
frazzling
frizz
frizzante
frizzed
frizzer
frizzers
frizzes
frizzier
frizziest
frizzily
frizziness
frizzinesses
frizzing
frizzle
frizzled
frizzler
frizzlers
frizzles
frizzlier
frizzliest
frizzling
frizzly
frizzy
fuzz
fuzzball
fuzzbox
fuzzboxes
fuzzed
fuzzes
fuzzier
fuzziest
fuzzily
fuzziness
fuzzinesses
fuzzing
fuzztone
fuzztones
fuzzy
fuzzyheaded
fuzzyheadedness
fuzzyheadednesses
gizz
gizzard
gizzards
gozzan
gozzans
grizzle
grizzled
grizzler
grizzlers
grizzles
grizzlier
grizzlies
grizzliest
grizzling
grizzly
guzzle
guzzled
guzzler
guzzlers
guzzles
guzzling
hazzan
hazzanim
hazzans
hizz
hizzoner
hizzoners
humbuzz
humbuzzes
huzza
huzzaed
huzzah
huzzahed
huzzahing
huzzahs
huzzaing
huzzaings
huzzas
intermezzi
intermezzo
intermezzos
izzard
izzards
izzat
jacuzzi
jacuzzis
jazz
jazzbo
jazzbos
jazzed
jazzer
jazzers
jazzes
jazzfest
jazzfests
jazzier
jazziest
jazzily
jazziness
jazzinesses
jazzing
jazzish
jazzlike
jazzman
jazzmen
jazzy
jizz
jizzes
lazzarone
lazzaroni
lazzi
lazzo
lezzes
lezzie
lezzies
lezzy
luzzes
mazzard
mazzards
mezzanine
mezzanines
mezzavoce
mezze
mezzes
mezzo
mezzos
mezzotint
mezzotinted
mezzotinter
mezzotinting
mezzotinto
mezzotintos
mezzotints
mizz
mizzen
mizzenmast
mizzenmasts
mizzens
mizzensail
mizzle
mizzled
mizzles
mizzling
mizzlings
mizzly
mizzonite
moorbuzzard
moorbuzzards
morbidezza
mozz
mozzarella
mozzarellas
mozzes
mozzetta
mozzettas
mozzette
mozzie
mozzies
mozzle
muezzin
muezzins
muzz
muzzier
muzziest
muzzily
muzziness
muzzinesses
muzzle
muzzled
muzzleloader
muzzleloaders
muzzleloading
muzzler
muzzlers
muzzles
muzzling
muzzy
nebuchadnezzar
nebuchadnezzars
nozzer
nozzers
nozzle
nozzles
nuzzer
nuzzers
nuzzle
nuzzled
nuzzler
nuzzlers
nuzzles
nuzzling
outdazzle
outdazzled
outdazzles
outdazzling
palazzi
palazzo
palazzos
paparazzi
paparazzo
passamezzo
passamezzos
pavonazzo
pazazz
pazazzes
pazzazz
phizzes
piazza
piazzas
piazze
piazzian
pizazz
pizazzes
pizazzy
pizza
pizzaiola
pizzalike
pizzas
pizzaz
pizzazes
pizzazz
pizzazzes
pizzazzy
pizzelle
pizzelles
pizzeria
pizzerias
pizzicati
pizzicato
pizzicatos
pizzle
pizzles
pozz
pozzies
pozzolan
pozzolana
pozzolanas
pozzolanic
pozzolans
pozzuolana
pozzuolanas
pozzuolanic
pozzy
prezzes
prezzie
prezzies
puzzle
puzzled
puzzledom
puzzlehead
puzzleheaded
puzzleheadedness
puzzleheadednesses
puzzlement
puzzlements
puzzler
puzzlers
puzzles
puzzling
puzzlingly
puzzlings
puzzolana
pzazz
quizzed
quizzer
quizzers
quizzery
quizzes
quizzical
quizzicalities
quizzicality
quizzically
quizzicalness
quizzification
quizzifications
quizzified
quizzifies
quizzify
quizzifying
quizziness
quizzing
quizzings
razz
razzamatazz
razzamatazzes
razzed
razzes
razzia
razzias
razzing
razzle
razzles
razzmatazz
razzmatazzes
rozzer
rozzers
schemozzle
schemozzled
schemozzles
schemozzling
schizzier
schizziest
schizzy
schnozz
schnozzle
schnozzles
scuzz
scuzzbag
scuzzbags
scuzzball
scuzzballs
scuzzbucket
scuzzbuckets
scuzzes
scuzzier
scuzziest
scuzzily
scuzzy
shemozzle
shemozzles
shimozzle
shimozzles
shlemozzle
shlemozzled
shlemozzles
shlemozzling
showbizzes
showbizzy
sizzle
sizzled
sizzler
sizzlers
sizzles
sizzling
sizzlingly
sizzlings
snazzier
snazziest
snazzily
snazziness
snazzinesses
snazzy
snuzzle
snuzzled
snuzzles
snuzzling
sozzle
sozzled
sozzles
sozzling
sozzly
spazz
spazzed
spazzes
spazzing
squizzes
swazzle
swazzles
swizz
swizzes
swizzle
swizzled
swizzler
swizzlers
swizzles
swizzling
swozzle
swozzles
tazza
tazzas
tazze
terrazzo
terrazzos
tetrazzini
tizz
tizzes
tizzies
tizzy
trezzes
twizzle
twizzled
twizzles
twizzling
undazzle
undazzled
undazzles
undazzling
unmuzzle
unmuzzled
unmuzzles
unmuzzling
unpuzzle
unpuzzled
unpuzzles
unpuzzling
whizz
whizzbang
whizzbangs
whizzed
whizzer
whizzers
whizzes
whizzing
whizzingly
whizzings
wizzen
wizzens
wizzes
wuzzle
zizz
zizzed
zizzes
zizzing
zizzle
zizzled
zizzles
zizzling
zuzzes
zyzzyva
zyzzyvas
zzz
</pre>


<div class="answer">
Sample answer:
<pre>egrep 'zz' dictionary.txt | egrep -v \"'s$\"</pre>
</div>

</li><li>

Write an egrep command that prints the words that contain four consecutive vowels?
<p>
<b>Hint</b>:  it should print these words:


    
        
    





</p><pre class="command_line" style="max-height: 12em;overflow:  auto;">Aiea
Aiea's
Araguaia
Araguaia's
Douai
Douai's
Graeae
Graiae
Hawaiian
Hawaiians
Homoiousian
Homoiousian's
Homoiousianism
Homoiousianism's
Homoiousianisms
Homoiousians
Iroquoian
Iroquoian's
Iroquoians
Kauai
Kauai's
Keaau
Keaau's
Kilauea
Kilauea's
Longueuil
Longueuil's
Louie
Louie's
Montesquieu
Montesquieu's
Niuean
Niueans
Paauilo
Paauilo's
Palaeoanthropus
Palaeoanthropus's
Pareoean
Pareoean's
Pauiie
Pauiie's
Pollaiuolo
Pollaiuolo's
Pompeiian
Pompeiians
Puiia
Puiia's
Rouault
Rouault's
Rousseauesque
Rousseauian
Rousseauism
Rousseauism's
Rousseauisms
Rousseauist
Rousseauist's
Rousseauistic
Rousseauists
Siouan
Siouan's
Siouans
aqueous
archaeoastronomer
archaeoastronomers
archaeoastronomical
archaeoastronomies
archaeoastronomy
banlieue
banlieue's
beauish
blooie
cooee
cooeed
cooeeing
cooees
enqueue
epigaeous
epopoeia
epopoeias
euoi
euois
euouae
euouaes
flooie
giaour
giaour's
giaours
gooier
gooiest
guaiac
guaiacol
guaiacol's
guaiacols
guaiacs
guaiacum
guaiacum's
guaiacums
guaiocum
guaiocums
hawaiians
homoiousian
homoiousians
hypoaeolian
hypogaeous
loaiasis
loaiasis's
looie
looie's
looies
louie
louie's
louies
maieutic
maieutical
maieutics
meoued
meouing
metasequoia
metasequoias
miaou
miaoued
miaouing
miaous
mythopoeia
mythopoeia's
mythopoeias
nonaqueous
obloquious
obsequious
obsequiously
obsequiousness
obsequiousnesses
onomatopoeia
onomatopoeia's
onomatopoeias
palaeoanthropic
palaeoanthropological
palaeoanthropologies
palaeoanthropologist
palaeoanthropologists
palaeoanthropology
palaeoanthropology's
palaeoecologic
palaeoecological
palaeoecologies
palaeoecologist
palaeoecologist's
palaeoecologists
palaeoecology
palaeoecology's
palaeoethnologic
palaeoethnological
palaeoethnologist
palaeoethnologists
palaeoethnology
pharmacopoeia
pharmacopoeia's
pharmacopoeial
pharmacopoeian
pharmacopoeias
plateaued
plateauing
prosopopoeia
prosopopoeia's
prosopopoeial
prosopopoeias
queue
queue's
queued
queueing
queueings
queuer
queuer's
queuers
queues
queuings
radioautograph
radioautograph's
radioautographic
radioautographies
radioautographs
radioautography
radioautography's
radioiodine
radioiodines
reliquiae
rhythmopoeia
saouari
saouaris
scarabaeoid
scarabaeoids
sequoia
sequoia's
sequoias
subaqueous
tenuious
terraqueous
zoaea
zoaea's
zooea
zooeae
zooeal
zooeas
zoogloeae
zoogloeoid
zooier
zooiest
</pre>

<div class="answer">

<br>
Sample answer:
<pre>egrep '[aeiouAEIOU][aeiouAEIOU][aeiouAEIOU][aeiouAEIOU]' dictionary.txt</pre>
<p>
or using egrep's -i option to ignore case and {} for repetition:
</p><p>
</p><pre>egrep -i '[aeiou]{4}' dictionary.txt</pre>
</div>


</li><li>
Write an egrep command that prints words which contain all 5 vowels "aeiou" in that order?
<p>
The words may contain more than 5 vowels but they must contain "aeiou" in that order.
</p><p>
<b>Hint</b>:  it should print these words:


    
        
    





</p><pre class="command_line" style="max-height: 12em;overflow:  auto;">abstemious
abstemiously
abstemiousness
abstemiousness's
abstemiousnesses
abstentious
adenocarcinomatous
adventitious
adventitiously
adventitiousness
adventitiousness's
adventitiousnesses
aeruginous
amentiferous
androdioecious
andromonoecious
anemophilous
antenniferous
antireligious
arenicolous
argentiferous
arsenious
arteriovenous
asclepiadaceous
autoecious
autoeciously
bacteriophagous
caesalpiniaceous
caesious
cavernicolous
chaetiferous
facetious
facetiously
facetiousness
facetiousness's
facetiousnesses
flagelliferous
garnetiferous
haemoglobinous
hamamelidaceous
lateritious
paroecious
quadrigeminous
sacrilegious
sacrilegiously
sacrilegiousness
sacrilegiousness's
sacrilegiousnesses
sarraceniaceous
supercalifragilisticexpialidocious
ultrareligious
ultraserious
valerianaceous
</pre>

<div class="answer">
Sample answer:
<pre>egrep -i 'a.*e.*i.*o.*u' dictionary.txt</pre>
</div>

</li><li>
Write an egrep command that prints which contain the vowels "aeiou" in that order
and no other vowels.
<p>
<b>Hint</b>:  it should print these words:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">abstemious
abstemiously
abstentious
arsenious
caesious
facetious
facetiously
</pre>

<div class="answer">
Sample answer:
<pre>egrep -i '^[^aeiou]*a[^aeiou]*e[^aeiou]*i[^aeiou]*o[^aeiou]*u[^aeiou]*$' dictionary.txt</pre>
</div>
</li></ol>








<p>
When you think your program is working you can use <code>autotest</code> to run some simple automated tests:

</p><pre class="command_line"><kbd class="shell">2041 autotest dictionary</kbd>
</pre>












    




     







    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



<pre class="command_line"><kbd class="shell">give cs2041 lab01_dictionary dictionary_answers.txt</kbd>
</pre>





    
        
        
            
            <div class="answer">
                Sample solution for <code>dictionary_answers.txt</code>
                






    
        <pre class="program language-clike"><code class=" language-clike">This file is automarked<span class="token punctuation">.</span>

Do not add extra lines to this file<span class="token punctuation">,</span> just add your answers<span class="token punctuation">.</span>

For example <span class="token keyword">if</span> your answer to Q1 is<span class="token punctuation">:</span> egrep Andrew words<span class="token punctuation">.</span>txt
Change the line that says Q1 answer to<span class="token punctuation">:</span>

Q1 answer<span class="token punctuation">:</span> egrep Andrew words<span class="token punctuation">.</span>txt


<span class="token number">1</span><span class="token punctuation">)</span> Write an egrep command  that prints  the words <span class="token keyword">in</span> dictionary<span class="token punctuation">.</span>txt
which contain <span class="token keyword">in</span> characters <span class="token string">"lmn"</span> consecutively<span class="token punctuation">.</span>

Q1 answer<span class="token punctuation">:</span> egrep <span class="token string">'lmn'</span> dictionary<span class="token punctuation">.</span>txt


<span class="token number">2</span><span class="token punctuation">)</span> Write a shell pipeline  that prints the words that contain <span class="token string">"zz"</span><span class="token punctuation">,</span> but <span class="token keyword">do</span> not end <span class="token keyword">in</span> apostrophe<span class="token operator">-</span>s <span class="token punctuation">(</span>'s<span class="token punctuation">)</span><span class="token operator">?</span>

Q2 answer<span class="token punctuation">:</span> egrep <span class="token string">'zz'</span> dictionary<span class="token punctuation">.</span>txt <span class="token operator">|</span> egrep <span class="token operator">-</span>v <span class="token string">"'s$"</span>


<span class="token number">3</span><span class="token punctuation">)</span> Write an egrep command that prints the words that contain four consecutive vowels<span class="token operator">?</span>

Q3 answer<span class="token punctuation">:</span> egrep <span class="token string">'[aeiouAEIOU][aeiouAEIOU][aeiouAEIOU][aeiouAEIOU]'</span> dictionary<span class="token punctuation">.</span>txt


<span class="token number">4</span><span class="token punctuation">)</span> Write an egrep command that prints words which contain all <span class="token number">5</span> vowels <span class="token string">"aeiou"</span> <span class="token keyword">in</span> that order<span class="token operator">?</span>

Q4 answer<span class="token punctuation">:</span> egrep <span class="token operator">-</span>i <span class="token string">'a.*e.*i.*o.*u'</span> dictionary<span class="token punctuation">.</span>txt


<span class="token number">5</span><span class="token punctuation">)</span> Write an egrep command that prints which contain the vowels <span class="token string">"aeiou"</span> <span class="token keyword">in</span> that order
and no other vowels<span class="token punctuation">.</span>

Q5 answer<span class="token punctuation">:</span> egrep <span class="token operator">-</span>i <span class="token string">'^[^aeiou]*a[^aeiou]*e[^aeiou]*i[^aeiou]*o[^aeiou]*u[^aeiou]*$'</span> dictionary<span class="token punctuation">.</span>txt</code></pre>





                
            </div>
            
        
    


</div>
    </div>

 


    
    



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Exercise: egrep-ing Federal Parliament
            </h3>
        </div>
        <div class="card-body">











There is a template file named <code>parliament_answers.txt</code> which you must use
to enter the answers for this exercise.
<p>



Download parliament_answers.txt <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/parliament/parliament_answers.txt">here</a>, or copy it to your CSE
account using the following command:

</p><pre class="command_line"><kbd class="shell">cp -n /web/cs2041/19T2/activities/parliament/parliament_answers.txt .</kbd>
</pre>



The autotest scripts depend on the format of <code>parliament_answers.txt</code> so just add your answers
don't otherwise change the file.
<p>
In this exercise you will analyze a file named <code>parliament.txt</code>
containing a list of the members of the Australian House of Representatives (MPs).
</p><p>



Download parliament.txt <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/parliament/parliament.txt">here</a>, or copy it to your CSE
account using the following command:

</p><pre class="command_line"><kbd class="shell">cp -n /web/cs2041/19T2/activities/parliament/parliament.txt .</kbd>
</pre>



<ol>
<li>
Write an egrep command that will print all the lines in the file where the electorate begins with W.
<p>
<b>Hint</b>:  it should print these lines:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Hon Scott Buchholz: Member for Wright, Queensland
Hon Tony Burke: Member for Watson, New South Wales
Mr Nick Champion: Member for Wakefield, South Australia
Mr Stephen Jones: Member for Whitlam, New South Wales
Mr Peter Khalil: Member for Wills, Victoria
Mr Llew O'Brien: Member for Wide Bay, Queensland
Dr Kerryn Phelps AM: Member for Wentworth, New South Wales
Ms Anne Stanley: Member for Werriwa, New South Wales
Ms Zali Steggall OAM: Member for Warringah, New South Wales
Hon Dan Tehan: Member for Wannon, Victoria
</pre>

<div class="answer">
Sample answer:
<pre>egrep 'Member for W' parliament.txt</pre>
</div>

</li><li>
Write an egrep command that will list all the lines in the file where the MP's
first name is Andrew.
<p>
<b>Hint</b>:  it should print these words:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Hon Andrew Gee: Member for Calare, New South Wales
Mr Andrew Giles: Member for Scullin, Victoria
Mr Andrew Hastie: Member for Canning, Western Australia
Mr Andrew Laming: Member for Bowman, Queensland
Hon Dr Andrew Leigh: Member for Fenner, Australian Capital Territory
Mr Andrew Wallace: Member for Fisher, Queensland
Mr Andrew Wilkie: Member for Denison, Tasmania
</pre>

<div class="answer">
Sample answer:
<pre>egrep ' Andrew .*:' parliament.txt</pre>

This depends on Andrew not being the surname of someone with an honorific such as OAM after their name.
</div>


</li><li>
Write an egrep command that will print all the lines in the file where the MP's
surname (last name) ends in the letters 'll'.
<p>
<b>Hint</b>:  it should print these words:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Mr Julian Hill: Member for Bruce, Victoria
Mr Brian Mitchell: Member for Lyons, Tasmania
Mr Rob Mitchell: Member for McEwen, Victoria
Ms Zali Steggall OAM: Member for Warringah, New South Wales
</pre>

<div class="answer">
Sample answer:
<pre>egrep 'll( [A-Z]*)?:' parliament.txt</pre>
<p>
Note this more obvious answer does not handle the MP having an Order of Australia:
</p><p>
</p><pre>egrep 'll:' parliament.txt</pre>

</div>

</li><li>
Write an egrep command that will print all the lines in the file where the MP's name <b>and</b> the electorate
ends in the letter 'y'.
<p>
<b>Hint</b>:  it should print these lines:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Mr Rowan Ramsey: Member for Grey, South Australia
</pre>

<div class="answer">
Sample answer:
<pre>egrep 'y( [A-Z]*)?:.*y,' parliament.txt</pre>

Note this more obvious answer does not handle the MP having an Order of Australia:

<pre>egrep 'y:.*y,' parliament.txt</pre>
</div>

</li><li>
Write an egrep command that will print all the lines in the file where the MP's name <b>or</b> the electorate
ends in the letter 'y'.
<p>
<b>Hint</b>:  it should print these lines:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Dr Anne Aly: Member for Cowan, Western Australia
Hon Linda Burney: Member for Barton, New South Wales
Mr Pat Conroy: Member for Shortland, New South Wales
Mr Chris Crewther: Member for Dunkley, Victoria
Mr Milton Dick: Member for Oxley, Queensland
Hon Damian Drum: Member for Murray, Victoria
Ms Nicolle Flint: Member for Boothby, South Australia
Hon Ed Husic: Member for Chifley, New South Wales
Hon Bob Katter: Member for Kennedy, Queensland
Ms Ged Kearney: Member for Batman, Victoria
Mr Craig Kelly: Member for Hughes, New South Wales
Hon Dr Mike Kelly AM: Member for Eden-Monaro, New South Wales
Hon Michelle Landry: Member for Capricornia, Queensland
Hon Sussan Ley: Member for Farrer, New South Wales
Mrs Melissa McIntosh: Member for Lindsay, New South Wales
Hon Ben Morton: Member for Tangney, Western Australia
Mr Llew O'Brien: Member for Wide Bay, Queensland
Hon Tanya Plibersek: Member for Sydney, New South Wales
Mr Rowan Ramsey: Member for Grey, South Australia
Ms Michelle Rowland: Member for Greenway, New South Wales
Hon Tony Smith: Member for Casey, Victoria
Ms Anne Stanley: Member for Werriwa, New South Wales
Mr Trent Zimmerman: Member for North Sydney, New South Wales
</pre>


<div class="answer">

Sample answer:
<pre>egrep 'y( [A-Z]*)?:|y,' parliament.txt</pre>
<p>
Note this more obvious answer does not handle the MP having an Order of Australia:
</p><pre>egrep 'y[:,]' parliament.txt</pre>
</div>

</li><li>
Write an egrep command to print all the lines in the file where there is any word in the
MP's name or the electorate name that ends in ng.
<p>
<b>Hint</b>:  it should print these lines:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Mr John Alexander OAM: Member for Bennelong, New South Wales
Hon Josh Frydenberg: Member for Kooyong, Victoria
Mr Luke Gosling OAM: Member for Solomon, Northern Territory
Mr Andrew Hastie: Member for Canning, Western Australia
Hon Catherine King: Member for Ballarat, Victoria
Ms Madeleine King: Member for Brand, Western Australia
Mr Andrew Laming: Member for Bowman, Queensland
Hon Bill Shorten: Member for Maribyrnong, Victoria
Mr Terry Young: Member for Longman, Queensland
</pre>

<div class="answer">
Sample answer:
<pre>egrep 'ng[^a-z]' parliament.txt</pre>
</div>

</li><li>
Write an egrep command that will print all the lines in the file where the MP's
surname (last name) both begins and ends with a vowel.
<p>
<b>Hint</b>:  it should print these lines:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Hon Anthony Albanese: Member for Grayndler, New South Wales
Ms Cathy O'Toole: Member for Herbert, Queensland
</pre>


<div class="answer">
Sample answer:
<pre>egrep '[AEIOU][^ ]*[aeiou]( [A-Z]*)?:' parliament.txt</pre>
</div>

</li><li>
Most electorate have names that are a single word, e.g. Warringah, Lyons &amp; Grayndler.
A few electorates have multiple word names, for example, Kingsford Smith.
Write an egrep command that will print all the lines in the file where the electorate name contains
multiple words (separated by spaces or hyphens).
<p>
<b>Hint</b>:  it should print these lines:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Hon Mark Butler: Member for Port Adelaide, South Australia
Hon Barnaby Joyce: Member for New England, New South Wales
Hon Dr Mike Kelly AM: Member for Eden-Monaro, New South Wales
Mr Llew O'Brien: Member for Wide Bay, Queensland
Hon Matt Thistlethwaite: Member for Kingsford Smith, New South Wales
Hon Jason Wood: Member for La Trobe, Victoria
Mr Trent Zimmerman: Member for North Sydney, New South Wales
</pre>

<div class="answer">
Sample answer:
<pre>egrep -i 'Member for [a-z]+[ -][a-z]' parliament.txt</pre>
</div>

</li><li>

Write a shell pipeline which prints the 8 Australians states &amp; territory in order of the number of MPs they have.
It should print only the number of MPs, followed by the name of the states/territories.
It should print them from fewest to most MPs.
<p>
Hint: check out the Unix filters cut, sort, uniq in the lecture notes.
</p><p>
<b>Hint</b>:  it should print these lines:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">      1  Australian Capital Territory
      2  Northern Territory
      5  Tasmania
      9  South Australia
     15  Western Australia
     27  Queensland
     33  Victoria
     45  New South Wales
</pre>

<div class="answer">

Sample answer:
<pre>cut -d: -f2 parliament.txt|cut -d, -f2|sort|uniq -c|sort -n</pre>
</div>

</li><li>
Challenge: The most common first name for an MP is Andrew.
Write a shell pipeline which prints the 2nd most common MP first name.
It should print this first name and only this first name.
<p>
Hint: check out the Unix filters cut, sort, sed, head, tail &amp; uniq in the lecture notes.
</p><p>
<b>Hint</b>:  it should print this line:


    
        
    





</p><pre class="command_line" style="max-height: 32em;overflow:  auto;">Tony
</pre>

<div class="answer">

Sample answer:
<pre>cut -d: -f1 parliament.txt|sed 's/ Dr / /'|cut -d' ' -f2|sort|uniq -c|sort|sed 's/.* //'|tail -2|head -1</pre>
</div>
</li></ol>








<p>
When you think your program is working you can use <code>autotest</code> to run some simple automated tests:

</p><pre class="command_line"><kbd class="shell">2041 autotest parliament</kbd>
</pre>












    




     







    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



<pre class="command_line"><kbd class="shell">give cs2041 lab01_parliament parliament_answers.txt</kbd>
</pre>





    
        
        
            
            <div class="answer">
                Sample solution for <code>parliament_answers.txt</code>
                






    
        <pre class="program language-clike"><code class=" language-clike">This file is automarked<span class="token punctuation">.</span>

Do not add extra lines to this file<span class="token punctuation">,</span> just add your answers<span class="token punctuation">.</span>

For example <span class="token keyword">if</span> your answer to Q1 is<span class="token punctuation">:</span> egrep Andrew words<span class="token punctuation">.</span>txt
Change the line that says Q1 answer to<span class="token punctuation">:</span>

Q1 answer<span class="token punctuation">:</span> egrep Andrew words<span class="token punctuation">.</span>txt


<span class="token number">1</span><span class="token punctuation">)</span> Write an egrep command that will print all the lines <span class="token keyword">in</span> the file where the electorate begins with W<span class="token punctuation">.</span>

Q1 answer<span class="token punctuation">:</span> egrep <span class="token string">'Member for W'</span> parliament<span class="token punctuation">.</span>txt


<span class="token number">2</span><span class="token punctuation">)</span> Write an egrep command that will list all the lines <span class="token keyword">in</span> the file where the MP's
first name is Andrew<span class="token punctuation">.</span>

Q2 answer<span class="token punctuation">:</span> egrep <span class="token string">' Andrew .*:'</span> parliament<span class="token punctuation">.</span>txt


<span class="token number">3</span><span class="token punctuation">)</span> Write an egrep command that will print all the lines <span class="token keyword">in</span> the file where the MP's
surname <span class="token punctuation">(</span>last name<span class="token punctuation">)</span> ends <span class="token keyword">in</span> the letters <span class="token string">'ll'</span><span class="token punctuation">.</span>

Q3 answer<span class="token punctuation">:</span> egrep <span class="token string">'ll( [A-Z]*)?:'</span> parliament<span class="token punctuation">.</span>txt


<span class="token number">4</span><span class="token punctuation">)</span> Write an egrep command that will print all the lines <span class="token keyword">in</span> the file where the MP's name and the electorate
ends <span class="token keyword">in</span> the letter <span class="token string">'y'</span><span class="token punctuation">.</span>

Q4 answer<span class="token punctuation">:</span> egrep <span class="token string">'y( [A-Z]*)?:.*y,'</span> parliament<span class="token punctuation">.</span>txt


<span class="token number">5</span><span class="token punctuation">)</span> Write an egrep command that will print all the lines <span class="token keyword">in</span> the file where the MP's name or the electorate
ends <span class="token keyword">in</span> the letter <span class="token string">'y'</span><span class="token punctuation">.</span>

Q5 answer<span class="token punctuation">:</span> egrep <span class="token string">'y( [A-Z]*)?:|y,'</span> parliament<span class="token punctuation">.</span>txt


<span class="token number">6</span><span class="token punctuation">)</span> Write an egrep command to print all the lines <span class="token keyword">in</span> the file where there is any word <span class="token keyword">in</span> the
MP's name or the electorate name that ends <span class="token keyword">in</span> ng<span class="token punctuation">.</span>

Q6 answer<span class="token punctuation">:</span> egrep <span class="token string">'ng[^a-z]'</span> parliament<span class="token punctuation">.</span>txt


<span class="token number">7</span><span class="token punctuation">)</span> Write an egrep command that will print all the lines <span class="token keyword">in</span> the file where the MP's
surname <span class="token punctuation">(</span>last name<span class="token punctuation">)</span> both begins and ends with a vowel<span class="token punctuation">.</span>

Q7 answer<span class="token punctuation">:</span> egrep <span class="token string">'[AEIOU][^ ]*[aeiou]( [A-Z]*)?:'</span> parliament<span class="token punctuation">.</span>txt


<span class="token number">8</span><span class="token punctuation">)</span> Most electorate have names that are a single word<span class="token punctuation">,</span> e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> Warringah<span class="token punctuation">,</span> Lyons <span class="token operator">&amp;</span> Grayndler<span class="token punctuation">.</span>
A few electorates have multiple word names<span class="token punctuation">,</span> <span class="token keyword">for</span> example<span class="token punctuation">,</span> Kingsford Smith<span class="token punctuation">.</span>
Write an egrep command that will print all the lines <span class="token keyword">in</span> the file where the electorate name contains
multiple words <span class="token punctuation">(</span>separated by spaces or hyphens<span class="token punctuation">)</span><span class="token punctuation">.</span>

Q8 answer<span class="token punctuation">:</span> egrep <span class="token operator">-</span>i <span class="token string">'Member for [a-z]+[ -][a-z]'</span> parliament<span class="token punctuation">.</span>txt


<span class="token number">9</span><span class="token punctuation">)</span> Write a shell pipeline which prints the <span class="token number">8</span> Australians states <span class="token operator">&amp;</span> territory <span class="token keyword">in</span> order of the number of MPs they have<span class="token punctuation">.</span>
It should print only the number of MPs<span class="token punctuation">,</span> followed by the name of the states<span class="token operator">/</span>territories<span class="token punctuation">.</span>
It should print them from fewest to most MPs<span class="token punctuation">.</span>

Q9 answer<span class="token punctuation">:</span> cut <span class="token operator">-</span>d<span class="token punctuation">:</span> <span class="token operator">-</span>f2 parliament<span class="token punctuation">.</span>txt<span class="token operator">|</span>cut <span class="token operator">-</span>d<span class="token punctuation">,</span> <span class="token operator">-</span>f2<span class="token operator">|</span>sort<span class="token operator">|</span>uniq <span class="token operator">-</span>c<span class="token operator">|</span>sort <span class="token operator">-</span>n


<span class="token number">10</span><span class="token punctuation">)</span> Challenge<span class="token punctuation">:</span> The most common first name <span class="token keyword">for</span> an MP is Andrew<span class="token punctuation">.</span>
Write a shell pipeline which prints the <span class="token number">2</span>nd most common MP first name<span class="token punctuation">.</span>
It should print this first name and only this first name<span class="token punctuation">.</span>

Q10 answer<span class="token punctuation">:</span> cut <span class="token operator">-</span>d<span class="token punctuation">:</span> <span class="token operator">-</span>f1 parliament<span class="token punctuation">.</span>txt<span class="token operator">|</span>sed <span class="token string">'s/ Dr / /'</span><span class="token operator">|</span>cut <span class="token operator">-</span>d<span class="token string">' '</span> <span class="token operator">-</span>f2<span class="token operator">|</span>sort<span class="token operator">|</span>uniq <span class="token operator">-</span>c<span class="token operator">|</span>sort<span class="token operator">|</span>sed <span class="token string">'s/.* //'</span><span class="token operator">|</span>tail <span class="token operator">-</span><span class="token number">2</span><span class="token operator">|</span>head <span class="token operator">-</span><span class="token number">1</span></code></pre>





                
            </div>
            
        
    


</div>
    </div>

 


    
    



<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Challenge Exercise: Exploring Regular Expressions
            </h3>
        </div>
        <div class="card-body">











There is a template file named <code>ab_answers.txt</code> which you must use
to enter the answers for this exercise.
<p>



Download ab_answers.txt <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/ab/ab_answers.txt">here</a>, or copy it to your CSE
account using the following command:

</p><pre class="command_line"><kbd class="shell">cp -n /web/cs2041/19T2/activities/ab/ab_answers.txt .</kbd>
</pre>




Use <code>egrep</code> to test your answers to these questions.
<p>
Try to solve these questions using the standard regular expression language described
in lectures.
</p><p>

</p><ol>
<li>
Write a egrep command  that prints the lines in a file named <code>input.txt</code> containing
containing at least one <code>A</code> and at least one <code>B</code>.
For example:
<p>
</p><table class="table table-bordered table-condensed  table-striped">
<tbody><tr><th width="50%">Matching</th><th width="50%">Not Matching
</th></tr><tr><td>Andrew's favourite Band is not</td><td>George is Brillant
</td></tr><tr><td>ABBA</td><td>Andrew
</td></tr><tr><td>BA</td><td>B
</td></tr><tr><td>AB</td><td>A
</td></tr></tbody></table>
<p>
So to test with egrep you might do this:

</p><pre class="command_line"><kbd class="shell">cat &gt;input.txt &lt;&lt;eof</kbd>
Andrew's favourite Band is not
George is Brillant
ABBA
Andrew
AB
BA
A
B
eof
<kbd class="shell">egrep 'REGEXP' input.txt</kbd>
Andrew's favourite Band is not
ABBA
AB
BA
</pre>

<div class="answer">
<pre>egrep 'A.*B|B.*A' input.txt</pre>
</div>

</li><li>
Write a egrep command  that prints the lines in a file named <code>input.txt</code> containing
only the characters <code>A</code> and  <code>B</code> such that
all pairs of adjacent A's occur before any pairs of adjacent B's.
In other words if there is pair of B's on the line , there can not be
a pair of A's afterwards.
<p>
</p><table class="table table-bordered table-condensed  table-striped">
<tbody><tr><th width="50%">Matching</th><th width="50%">Not Matching
</th></tr><tr><td>ABAABAABAABBBBABB</td><td>BBAA
</td></tr><tr><td>ABBA</td><td>ABBAA
</td></tr><tr><td>ABAAAAAAAAAABBA</td><td>ABBABABABABAA
</td></tr><tr><td>ABABABABA</td><td>ABBBAAA
</td></tr><tr><td>A</td><td>BBABABABABABABAA
</td></tr></tbody></table>
<p>
</p><div class="answer">
<pre>egrep '^(BA|A)*(|B)(AB|B)*(|A)$' input.txt</pre>
<p>
or courtesy Squish:
</p><p>
</p><pre>egrep '^(BA|A)*(BA|B)*$' input.txt</pre>
</div>
</li><li>
Write a egrep command  that prints the lines in a file named <code>input.txt</code> containing
only the characters <code>A</code> and  <code>B</code> such that
the number of A's is divisible by 4.
<p>
</p><table class="table table-bordered table-condensed  table-striped">
<tbody><tr><th width="50%">Matching</th><th width="50%">Not Matching
</th></tr><tr><td>AAAA</td><td>AAAAA
</td></tr><tr><td>BABABABAB</td><td>ABABBBBBBBBBBBBBBBAAA
</td></tr><tr><td>AAAABBBBAAAA</td><td>AAAABBABBAAAA
</td></tr><tr><td>BBBAABBBBBAABBBAAAA</td><td>BBBAABBABBBAABBBAAAA
</td></tr></tbody></table>
<p>
</p><div class="answer">
<pre>egrep '^B*(AB*AB*AB*AB*)*$' input.txt</pre>
</div>

</li><li>
Write a egrep command  that prints the lines in a file named <code>input.txt</code> containing
only the characters <code>A</code> and  <code>B</code> such that
there are exactly <i>n</i> A's followed by
exactly <i>n</i> B's and no other characters.
<p>
</p><table class="table table-bordered table-condensed  table-striped">
<tbody><tr><th width="50%">Matching</th><th width="50%">Not Matching
</th></tr><tr><td>AAABBB</td><td>AAABB
</td></tr><tr><td>AB</td><td>BA
</td></tr><tr><td>AABB</td><td>AABBB
</td></tr><tr><td>AAAABBBB</td><td>AAAABBBBA
</td></tr></tbody></table>

<div class="answer">
This can't be done with a (true) regular expression.
You prove this via the the wonderfully named <a href="http://en.wikipedia.org/wiki/Pumping_lemma_for_regular_languages">pumping lemma</a>.
<p>
It is possible with extensions to regular expressions, e.g. as  provided in Perl.

</p><pre>grep -P '^(A(?1)?B)$' input.txt</pre>
</div>
</li></ol>








<p>
When you think your program is working you can use <code>autotest</code> to run some simple automated tests:

</p><pre class="command_line"><kbd class="shell">2041 autotest ab</kbd>
</pre>












    




     







    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



<pre class="command_line"><kbd class="shell">give cs2041 lab01_ab ab_answers.txt</kbd>
</pre>





    
        
        
            
            <div class="answer">
                Sample solution for <code>ab_answers.txt</code>
                






    
        <pre class="program language-clike"><code class=" language-clike">This file is automarked<span class="token punctuation">.</span>

Do not add extra lines to this file<span class="token punctuation">,</span> just add your answers<span class="token punctuation">.</span>

For example <span class="token keyword">if</span> your answer to Q1 is<span class="token punctuation">:</span> egrep Andrew words<span class="token punctuation">.</span>txt
Change the line that says Q1 answer to<span class="token punctuation">:</span>

Q1 answer<span class="token punctuation">:</span> egrep Andrew words<span class="token punctuation">.</span>txt


<span class="token number">1</span><span class="token punctuation">)</span> Write a egrep command  that prints the lines <span class="token keyword">in</span> a file named input<span class="token punctuation">.</span>txt containing
containing at least one A and at least one B<span class="token punctuation">.</span>

Q1 answer<span class="token punctuation">:</span> egrep <span class="token string">'A.*B|B.*A'</span> input<span class="token punctuation">.</span>txt


<span class="token number">2</span><span class="token punctuation">)</span> Write a egrep command  that prints the lines <span class="token keyword">in</span> a file named input<span class="token punctuation">.</span>txt containing
only the characters A and  B such that
all pairs of adjacent A<span class="token string">'s occur before any pairs of adjacent B'</span>s<span class="token punctuation">.</span>
In other words <span class="token keyword">if</span> there is pair of B's on the line <span class="token punctuation">,</span> there can not be
a pair of A's afterwards<span class="token punctuation">.</span>

Q2 answer<span class="token punctuation">:</span> egrep <span class="token string">'^(BA|A)*(|B)(AB|B)*(|A)$'</span> input<span class="token punctuation">.</span>txt


<span class="token number">3</span><span class="token punctuation">)</span> Write a egrep command  that prints the lines <span class="token keyword">in</span> a file named input<span class="token punctuation">.</span>txt containing
only the characters A and  B such that
the number of A's is divisible by <span class="token number">4.</span>

Q3 answer<span class="token punctuation">:</span> egrep <span class="token string">'^B*(AB*AB*AB*AB*)*$'</span> input<span class="token punctuation">.</span>txt


<span class="token number">4</span><span class="token punctuation">)</span> Write a egrep command  that prints the lines <span class="token keyword">in</span> a file named input<span class="token punctuation">.</span>txt containing
only the characters A and  B such that
there are exactly n A's followed by
exactly n B's and no other characters<span class="token punctuation">.</span>

Q4 answer<span class="token punctuation">:</span> grep <span class="token operator">-</span>P <span class="token string">'^(A(?1)?B)$'</span> input<span class="token punctuation">.</span>txt</code></pre>





                
            </div>
            
        
    


</div>
    </div>





<div class="card">
        <div class="card-header">
            <h3 class="card-title">
                Submission
            </h3>
        </div>
        <div class="card-body">


When you are finished each exercises make sure you submit your work by running <b>give</b>.
<p>
You can run <b>give</b> multiple times.
Only your last submission will be marked.
</p><p>
Don't submit any exercises you haven't attempted.
</p><p>
If you are working at home, you may find it more convenient
to upload your work via
 <a href="https://cgi.cse.unsw.edu.au/~give/code/login.php?app=/~give/Student/give.php&amp;debug=get_authuser">give's web interface</a>.
</p><p>
Remember you have until

<b>Tuesday 11 June 17:59:59</b>


to submit your work.
</p><p>
You cannot obtain marks by e-mailing lab work to tutors or lecturers.
</p><p>
You check the files you have submitted <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/student/">here</a>
</p><p>
Automarking will be run by the lecturer several days after the submission deadline
for the test, using test cases that you haven't seen:
different to the test cases <code><kbd>autotest</kbd></code> runs for
you.
</p><p>
(Hint: do your own testing as well as running
<code><kbd>autotest</kbd></code>)
</p><p>
After automarking is run by the lecturer you can
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/student/">view it here</a>
the resulting mark will also be available via
<a href="https://cgi.cse.unsw.edu.au/~give/Student/sturec.php">via give's web interface</a>
</p><p>
</p><h4>Lab Marks</h4>
<p>
When all components of a lab  are automarked you should be able to view the
the marks <a href="https://cgi.cse.unsw.edu.au/~give/Student/sturec.php">via give's web interface</a>
or by running this command on a CSE machine:

</p><pre class="command_line"><kbd class="shell">2041 classrun -sturec</kbd>
</pre>
<p>
The lab exercises for each week are worth in total 1.2 marks.
</p><p>
Usually each lab exercise will be worth the same - for example if there are 5 lab exercises each will be worth 0.4 marks.
</p><p>
Except challenge exercises (see below) will never total more than 20% of each week's lab mark.
</p><p>
All of your lab marks for weeks 1-10, will be summed to give you a mark out of 12.
</p><p>
If their sum exceeds 9 - your total mark will be capped at 9.

</p><h4>Running Autotests On your Own Computer</h4>

An experimental version of autotest exists which may allow you to run autotest on your own computer.
<p>
If you are running Linux,  Windows Subsystem for Linux or OSX.  These commands might let you run autotests at home.

</p><pre class="command_line"><kbd class="shell">sudo wget https://cgi.cse.unsw.edu.au/~cs2041/19T2/resources/home_autotest -O/usr/local/bin/2041_autotest</kbd>
<kbd class="shell">sudo chmod 755 /usr/local/bin/2041_autotest</kbd>
<kbd class="shell">2041_autotest shell_snapshot</kbd>
</pre>

Autotest itself needs Python 3.6 (or later) installed.
<p>
Particular autotests may require other software install, e.g.  autotests of perl programs require Perl installed (of course).
</p><p>
The legit autotests need  python3.7, git &amp; binfmt-support installed.
</p><p>
The program embeds the autotests themselves, so you'll need to re-download if autotests are changed, added, fixed, ...
</p><p>
If it breaks on your computer post on the class forum  and we'll fix if we can, but this is very definitely experimental.

</p></div>
    </div>


</div>





<footer class="mt-3 container text-center no-print">
<p class="text-muted">
<strong>COMP(2041|9044) 19T2: Software Construction</strong>
is brought to you by <br>
the <a href="https://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>
at the <a href="https://www.unsw.edu.au/">University of New South Wales</a>, Sydney.<br>
For all enquiries, please email the class account at
<a href="mailto:@cse.unsw.edu.au">cs2041@cse.unsw.edu.au</a><br>

<small>CRICOS Provider 00098G</small>
</p>



</footer>





</body></html>