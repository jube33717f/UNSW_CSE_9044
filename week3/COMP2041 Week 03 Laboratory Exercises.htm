<!DOCTYPE html>
<!-- saved from url=(0057)https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/03/questions -->
<html lang="en" class="gr__cgi_cse_unsw_edu_au"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport">
<title>

COMP2041 Week 03 Laboratory Exercises

</title>
<!-- <link href="/~cs2041/19T2/flask.cgi/static/bootstrap.min.css" rel="stylesheet"> -->
<link crossorigin="anonymous" href="./COMP2041 Week 03 Laboratory Exercises_files/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" rel="stylesheet">
<link href="./COMP2041 Week 03 Laboratory Exercises_files/course.css" rel="stylesheet">
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/jquery.min.js"></script> -->
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/bootstrap.min.js"></script> -->
<script src="./COMP2041 Week 03 Laboratory Exercises_files/jquery-3.3.1.min.js"></script>
<script src="./COMP2041 Week 03 Laboratory Exercises_files/popper.min.js"></script>
<script crossorigin="anonymous" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" src="./COMP2041 Week 03 Laboratory Exercises_files/bootstrap.min.js"></script>
<script src="./COMP2041 Week 03 Laboratory Exercises_files/course.js" type="text/javascript"></script>
<!-- prism code-highligting -->
<link href="./COMP2041 Week 03 Laboratory Exercises_files/prism.css" rel="stylesheet">
<!-- defer loading of prism.js script until DOM is loaded, as per PR #26 and https://stackoverflow.com/a/24070373 -->
<script defer="" src="./COMP2041 Week 03 Laboratory Exercises_files/prism.js" type="text/javascript"></script>
<script async="" src="./COMP2041 Week 03 Laboratory Exercises_files/ei.js"></script>
<link href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/" rel="canonical">
</head>
<body class="container" data-gr-c-s-loaded="true">
<div class="row" id="heading">
<div class="col-3 text-left">
<a class="heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/" id="left_heading_link" target="_blank">COMP(2041|9044) 19T2</a>
</div>
<div class="col-6 text-center">
<span class="dropdown">
<button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link dropdown-toggle heading_button" data-toggle="dropdown" id="week-selector" type="button">
        Week 03 <span class="caret"></span>
</button>
<div aria-labelledby="week-selector" class="dropdown-menu">
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/01/questions">Week 01</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/02/questions">Week 02</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/03/questions">Week 03</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/04/questions">Week 04</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/05/questions">Week 05</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/06/questions">Week 06</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/07/questions">Week 07</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/08/questions">Week 08</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/09/questions">Week 09</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/10/questions">Week 10</a>
</div>
</span>
<span class="dropdown">
<button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link dropdown-toggle heading_button" data-toggle="dropdown" id="tlb-selector" type="button">
        Laboratory <span class="caret"></span>
</button>
<div aria-labelledby="tlb-selector" class="dropdown-menu">
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/03/questions">Tutorial</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/03/questions">Laboratory</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/test/03/questions">Weekly Test</a>
</div>
</span>
<span class="dropdown">
<button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link dropdown-toggle heading_button" data-toggle="dropdown" id="qa-selector" type="button">
        Exercises <span class="caret"></span>
</button>
<div aria-labelledby="qa-selector" class="dropdown-menu">
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/03/questions">Exercises</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/03/answers">Sample Solutions</a>
</div>
</span>
</div>
<div class="col-3 text-right">
<a class="heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/" id="right_heading_link" target="_blank">COMP(2041|9044) 19T2</a>
</div>
</div>
<div class="tutlab lab">
<div class="card">
<div class="card-header">
<h3 class="card-title">
                Objectives
            </h3>
</div>
<div class="card-body">
<ul>
<li>Practice writing shell scripts for real tasks.</li>
<li>Practice processing collections of files with shell scripts.</li>
</ul>
</div>
</div>
<div class="card">
<div class="card-header">
<h3 class="card-title">
                Preparation
            </h3>
</div>
<div class="card-body">

Before the lab you should re-read the relevant lecture slides and their accompanying examples.


</div>
</div>
<div class="card">
<div class="card-header">
<h3 class="card-title">
                Getting Started
            </h3>
</div>
<div class="card-body">



Create a new directory for this lab called <code>lab03</code> and change to this directory with these comamnds:

<pre class="command_line"><kbd class="shell">mkdir lab03</kbd>
<kbd class="shell">cd lab03</kbd>
</pre>
</div>
</div>
<div class="card">
<div class="card-header">
<h3 class="card-title">
                Exercise: Converting Images from JPG to PNG
            </h3>
</div>
<div class="card-body">











Write a shell script <code>jpg2png.sh</code> which converts all images in <a href="http://en.wikipedia.org/wiki/JPEG">JPEG</a> format
in the current directory to <a href="http://en.wikipedia.org/wiki/Portable_Network_Graphics">PNG</a> format.
<p>
You can assume that JPEG files and only JPEG files have the suffix <code>jpg</code>.
</p><p>
If the conversion is succesful the JPEG file should be removed.
</p><p>
Your script should stop with the error message shown below and exit status 1 if the PNG file already exists.

</p><pre class="command_line"><kbd class="shell">wget https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/jpg2png/images.zip</kbd>
<kbd class="shell">unzip images.zip</kbd>
Archive:  images.zip
  inflating: Johannes Vermeer - The Girl With The Pearl Earring.jpg
  inflating: nautilus.jpg
  inflating: panic.jpg
  inflating: penguins.jpg
  inflating: shell.jpg
  inflating: stingray.jpg
  inflating: treefrog.jpg
<kbd class="shell">./jpg2png.sh</kbd>
<kbd class="shell">ls</kbd>
'Johannes Vermeer - The Girl With The Pearl Earring.png'   jpg2png.sh     panic.png  shell.png      treefrog.png
 images.zip                        nautilus.png   penguins.png   stingray.png
<kbd class="shell">wget https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/jpg2png//penguins.jpg</kbd>
<kbd class="shell">ls</kbd>
'Johannes Vermeer - The Girl With The Pearl Earring.png'   jpg2png.sh     panic.png  penguins.png   stingray.png
 images.zip                        nautilus.png   penguins.jpg   shell.png      treefrog.png
<kbd class="shell">./jpg2png.sh</kbd>
penguins.png already exists
</pre>
<h4>Hints</h4>
<p>
You may find sed and back quotes useful.
</p><p>
The tool <code>convert</code> will convert between many image formats, for example:

</p><pre class="command_line"><kbd class="shell">convert penguins.jpg penguins.png</kbd>
</pre>
<p>
When you think your program is working you can use <code>autotest</code> to run some simple automated tests:

</p><pre class="command_line"><kbd class="shell">2041 autotest jpg2png</kbd>
</pre>












    




     







    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



<pre class="command_line"><kbd class="shell">give cs2041 lab03_jpg2png jpg2png.sh</kbd>
</pre>
</div>
</div>
<div class="card">
<div class="card-header">
<h3 class="card-title">
                Exercise: Email that Image?
            </h3>
</div>
<div class="card-body">











Write a shell script <code>email_image.sh</code> which given a list of image
files as arguments  displays them one-by-one.  After the user has viewed each image
the script should prompt the user for an e-mail address.
If the user does enter an email address, the script should prompt the user for a message to
accompany the image and then send the image to
the specified e-mail address.
<pre class="command_line"><kbd class="shell">./email_image.sh penguins.png treefrog.png </kbd>
Address to e-mail this image to? <kbd>andrewt@cse.unsw.edu.au</kbd>
Message to accompany image? <kbd>Penguins are cool.</kbd>
penguins.png sent to andrewt@cse.unsw.edu.au
Address to e-mail this image to? <kbd>andrewt@cse.unsw.edu.au</kbd>
Message to accompany image? <kbd>This is a White-lipped Tree Frog</kbd>
treefrog.png sent to andrewt@cse.unsw.edu.au
</pre>
<p>
</p><h4>Hints</h4>
<p>
The program <code>display</code> can be used to view image files
</p><p>
The program  <code>mutt</code> can be used to send mail from the command line including attachments, for example:
</p><p>
</p><pre class="command_line"><kbd class="shell">echo 'Penguins are cool.'|mutt -s 'penguins!' -e 'set copy=no' -a penguins.png -- nobody@nowhere.com</kbd>
</pre>
<div></div>








There is no autotest and no automarking of this question.
<p>
When you have completed demonstrate your work to another student in your lab
and ask them to enter a
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/peer_assess/lab03_email_image/">peer assessment here</a>
</p><p>
It is prefered you do this during your lab, but if this is not possible
you may demonstrate your work to any other COMP(2041|9044) student before Tuesday 25 June 17:59:59.
Note, you must also submit the work with give.
</p><p>





















    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



</p><pre class="command_line"><kbd class="shell">give cs2041 lab03_email_image email_image.sh</kbd>
</pre>
</div>
</div>
<div class="card">
<div class="card-header">
<h3 class="card-title">
                Exercise: Date A Penguin?
            </h3>
</div>
<div class="card-body">











Write a shell script <code>date_image.sh</code> which, given a list of image
files as arguments, changes each file so it has a label added to the image
indicating the time it was taken.
You can assume the last-modification time of the image file
is the time it was taken.
<p>
So for example if we run these commands:

</p><pre class="command_line"><kbd class="shell">cp -p /web/cs2041/19T2/activities/date_image/penguins.jpg  .</kbd>
<kbd class="shell">ls -l penguins.jpg </kbd>
-rw-r--r-- 1 andrewt andrewt 58092 Mar 16 16:08 penguins.jpg
<kbd class="shell">./date_image.sh penguins.jpg</kbd>
<kbd class="shell">display  penguins.jpg </kbd>
</pre>

Then <code>penguins.jpg</code> should have been be modified to look like this:
<p>
<img alt="http://en.wikipedia.org/wiki/File:Emperor_penguins.jpg" src="./COMP2041 Week 03 Laboratory Exercises_files/labelled_penguins.jpg">
</p><h4>Hints</h4>
<p>
The program <code>convert</code> can be used to label an image like this:

</p><pre class="command_line"><kbd class="shell"> convert -gravity south -pointsize 36 -draw "text 0,10 'Andrew rocks'" penguins.jpg temporary_file.jpg</kbd>
</pre>
<b>Hint:</b> <code>sed</code> and/or <code>cut</code> may be useful to extract the date &amp; time from ls's output.
<p>
<b>Hint:</b> <code>convert</code> produce confusing messages if you don't get its option syntax exactly right








There is no autotest and no automarking of this question.
</p><p>
When you have completed demonstrate your work to another student in your lab
and ask them to enter a
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/peer_assess/lab03_date_image/">peer assessment here</a>
</p><p>
It is prefered you do this during your lab, but if this is not possible
you may demonstrate your work to any other COMP(2041|9044) student before Tuesday 25 June 17:59:59.
Note, you must also submit the work with give.
</p><p>





















    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



</p><pre class="command_line"><kbd class="shell">give cs2041 lab03_date_image date_image.sh</kbd>
</pre>
</div>
</div>
<div class="card">
<div class="card-header">
<h3 class="card-title">
                Exercise: Tagging a Collection of Music
            </h3>
</div>
<div class="card-body">












Andrew regularly spends time far from the internet and streaming music services such as Spotify,
so he has a <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/tag_music/music.zip">large collection</a> of <a href="https://en.wikipedia.org/wiki/MP3">MP3</a> files containing music.
<p>
Andrew has a problem - the <a href="https://en.wikipedia.org/wiki/ID3">ID3</a> tags in the <a href="https://en.wikipedia.org/wiki/MP3">MP3</a> files in his music collection are incorrect.
Unfortunately Andrew's favourite  player software organizes music using the information from these <a href="https://en.wikipedia.org/wiki/ID3">ID3</a> tags.  Your task it to fix Andrew's problem by set the <a href="https://en.wikipedia.org/wiki/ID3">ID3</a> tags to the correct values.  Fortunately the correct value for the tags can be retrieved from the file names and the names of the directories the files are in.
</p><p>
Your task is to write a shell script <code>tag_music.sh</code> which sets the ID3 tags of MP3 files using the information from  file names and directory names.
</p><p>
You'll first need to make a copy of Andrew's music collection.
</p><p>



Download music.zip <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/tag_music/music.zip">here</a>, or copy it to your CSE
account using the following command:

</p><pre class="command_line"><kbd class="shell">cp -n /web/cs2041/19T2/activities/tag_music/music.zip .</kbd>
</pre>
<p>
You assume the names of files and directories follow a standard format.  You can determine this
format by look at ethe files in Andrew's music collection.


</p><pre class="command_line"><kbd class="shell">unzip music.zip</kbd>
Archive:  music.zip
   creating: music/
   creating: music/Triple J Hottest 100, 2007/
  inflating: music/Triple J Hottest 100, 2007/2 - Straight Lines - Silverchair.mp3
  inflating: music/Triple J Hottest 100, 2007/10 - Don't Fight It - The Panics.mp3
 <i>...</i>
</pre>

The command <code>id3</code> can be used to list the value of ID3 tags in an MP3 file, for example:

<pre class="command_line"><kbd class="shell">id3 -l 'music/Triple J Hottest 100, 2013/1 - Riptide - Vance Joy.mp3'</kbd>
music/Triple J Hottest 100, 2013/1 - Riptide - Vance Joy.mp3:
Title  : Andrew Rocks                    Artist: Andrew
Album  : Best of Andrew                  Year: 2038, Genre: Unknown (255)
Comment:                                 Track: 42
</pre>

As you can see the ID3 tags of this music file have been accidentally over-written. The ID3 tags  should be:

<pre class="command_line"><kbd class="shell">id3 -l 'music/Triple J Hottest 100, 2013/1 - Riptide - Vance Joy.mp3'</kbd>
music/Triple J Hottest 100, 2013/1 - Riptide - Vance Joy.mp3:
Title  : Riptide                         Artist: Vance Joy
Album  : Triple J Hottest 100, 2013      Year: 2013, Genre: Unknown (255)
Comment:                                 Track: 1
</pre>

Fortunately all the information needed to fix the ID3 tags is available in
the name of the file and the name of the directory it is in.
<p>
You will write a shell script <code>tag_music.sh</code> which takes the name of 1 or more directories
as arguments and fixes the ID3 tags of the all MP3 files in that directory.
For example:

</p><pre class="command_line"><kbd class="shell">./tag_music.sh 'music/Triple J Hottest 100, 2015'</kbd>
<kbd class="shell">id3 -l 'music/Triple J Hottest 100, 2015/4 - The Less I Know the Better - Tame Impala.mp3'</kbd>
music/Triple J Hottest 100, 2015/4 - The Less I Know the Better - Tame Impala.mp3:
Title  : The Less I Know the Better      Artist: Tame Impala
Album  : Triple J Hottest 100, 2015      Year: 2015, Genre: Unknown (255)
Comment:                                 Track: 4
<kbd class="shell">./tag_music.sh music/*</kbd>
<kbd class="shell">id3 -l 'music/Triple J Hottest 100, 1995/10 - Greg! The Stop Sign!! - TISM.mp3'</kbd>
music/Triple J Hottest 100, 1995/10 - Greg! The Stop Sign!! - TISM.mp3:
Title  : Greg! The Stop Sign!!           Artist: TISM
Album  : Triple J Hottest 100, 1995      Year: 1995, Genre: Unknown (255)
Comment:                                 Track: 10
<kbd class="shell">id3 -l 'music/Triple J Hottest 100, 1999/1 - These Days - Powderfinger.mp3'</kbd>
music/Triple J Hottest 100, 1999/1 - These Days - Powderfinger.mp3:
Title  : These Days                      Artist: Powderfinger
Album  : Triple J Hottest 100, 1999      Year: 1999, Genre: Unknown (255)
Comment:                                 Track: 1
<kbd class="shell">id3 -l 'music/Triple J Hottest 100, 2012/2 - Little Talks - Of Monsters and Men.mp3'</kbd>
music/Triple J Hottest 100, 2012/2 - Little Talks - Of Monsters and Men.mp3:
Title  : Little Talks                    Artist: Of Monsters and Men
Album  : Triple J Hottest 100, 2012      Year: 2012, Genre: Unknown (255)
Comment:                                 Track: 2
</pre>

Your script should not change the <i>Genre</i> or <i>Comment</i> fields.
<p>
Your script should determine <i>Title</i>, <i>Artist</i>, <i>Track</i>, <i>Album</i> &amp; <i>Year</i> from the directory &amp; filename.

</p><h4>Hints</h4>
<pre class="command_line"><kbd class="shell">man id3</kbd>
<i>...</i>
</pre>
<code>cut</code> almost works for extracting  <i>Title</i> and <i>Album</i>  from the filename.
<p>
Handling the few MP3 files correctly where using <code>cut</code> doesn't work will be considered a <b>challenge exercise</b>.
</p><p>
It can be difficult debugging your script on Andrew's music collection.
In cases like these it usually worth creating a smaller data set
for initial debugging.
Such a tiny data set is available in  <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/tag_music/tiny_music.zip">tiny_music.zip</a> if you want to use it
for debugging.  This dataset is used in the first autotests.



Download tiny_music.zip <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/tag_music/tiny_music.zip">here</a>, or copy it to your CSE
account using the following command:

</p><pre class="command_line"><kbd class="shell">cp -n /web/cs2041/19T2/activities/tag_music/tiny_music.zip .</kbd>
</pre>
<pre class="command_line"><kbd class="shell">unzip tiny_music.zip</kbd>
Archive:  tiny_music.zip
   creating: tiny_music/
   creating: tiny_music/Album1, 2015/
  inflating: tiny_music/Album1, 2015/2 - Little Talks - Of Monsters and Men.mp3
  inflating: tiny_music/Album1, 2015/1 - Riptide - Vance Joy.mp3
   creating: tiny_music/Album2, 2016/
  inflating: tiny_music/Album2, 2016/2 - Royals - Lorde.mp3
  inflating: tiny_music/Album2, 2016/1 - Hoops - The Rubens.mp3
<kbd class="shell">id3 -l tiny_music/*/*.mp3</kbd>
tiny_music/Album1, 2015/1 - Riptide - Vance Joy.mp3:
Title  : Andrew Rocks                    Artist: Andrew
Album  : Best of Andrew                  Year: 2038, Genre: Unknown (255)
Comment:                                 Track: 42
tiny_music/Album1, 2015/2 - Little Talks - Of Monsters and Men.mp3:
Title  : Andrew Rocks                    Artist: Andrew
Album  : Best of Andrew                  Year: 2038, Genre: Unknown (255)
Comment:                                 Track: 42
tiny_music/Album2, 2016/1 - Hoops - The Rubens.mp3:
Title  : Andrew Rocks                    Artist: Andrew
Album  : Best of Andrew                  Year: 2038, Genre: Unknown (255)
Comment:                                 Track: 42
tiny_music/Album2, 2016/2 - Royals - Lorde.mp3:
Title  : Andrew Rocks                    Artist: Andrew
Album  : Best of Andrew                  Year: 2038, Genre: Unknown (255)
Comment:                                 Track: 42
<kbd class="shell">./tag_music.sh tiny_music/*</kbd>
<kbd class="shell">id3 -l tiny_music/*/*.mp3</kbd>
tiny_music/Album1, 2015/1 - Riptide - Vance Joy.mp3:
Title  : Riptide                         Artist: Vance Joy
Album  : Album1, 2015                    Year: 2015, Genre: Unknown (255)
Comment:                                 Track: 1
tiny_music/Album1, 2015/2 - Little Talks - Of Monsters and Men.mp3:
Title  : Little Talks                    Artist: Of Monsters and Men
Album  : Album1, 2015                    Year: 2015, Genre: Unknown (255)
Comment:                                 Track: 2
tiny_music/Album2, 2016/1 - Hoops - The Rubens.mp3:
Title  : Hoops                           Artist: The Rubens
Album  : Album2, 2016                    Year: 2016, Genre: Unknown (255)
Comment:                                 Track: 1
tiny_music/Album2, 2016/2 - Royals - Lorde.mp3:
Title  : Royals                          Artist: Lorde
Album  : Album2, 2016                    Year: 2016, Genre: Unknown (255)
Comment:                                 Track: 2
</pre>
<p>
When you think your program is working you can use <code>autotest</code> to run some simple automated tests:

</p><pre class="command_line"><kbd class="shell">2041 autotest tag_music</kbd>
</pre>












    




     







    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



<pre class="command_line"><kbd class="shell">give cs2041 lab03_tag_music tag_music.sh</kbd>
</pre>
</div>
</div>
<div class="card">
<div class="card-header">
<h3 class="card-title">
                Challenge Exercise: Creating A Fake Music Collection
            </h3>
</div>
<div class="card-body">











The test data for the previous question is not really Andrew's music collection.
All the mp3 files contain identical contents.
The directories and filenames  were created from the source of this  <a href="https://en.wikipedia.org/wiki/Triple_J_Hottest_100">web page</a>.
<p>
Write a shell script <code>create_music.sh</code> which uses the above webpage to create exactly the same directories and files as
in the test data set supplied above.
</p><p>
Your script should take 2 arguments: the name of an MP3 file to use as the contents of the MP3 files you create and
the directory in which to create the test data.
For example:

</p><pre class="command_line"><kbd class="shell">wget https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/create_music/sample.mp3</kbd>
<kbd class="shell">mkdir my_fake_music</kbd>
<kbd class="shell">ls my_fake_music</kbd>
<kbd class="shell">./create_music.sh sample.mp3 my_fake_music</kbd>
<kbd class="shell">ls my_fake_music</kbd>
'Triple J Hottest 100, 1993'  'Triple J Hottest 100, 1998'  'Triple J Hottest 100, 2003'  'Triple J Hottest 100, 2008'  'Triple J Hottest 100, 2013'
'Triple J Hottest 100, 1994'  'Triple J Hottest 100, 1999'  'Triple J Hottest 100, 2004'  'Triple J Hottest 100, 2009'  'Triple J Hottest 100, 2014'
'Triple J Hottest 100, 1995'  'Triple J Hottest 100, 2000'  'Triple J Hottest 100, 2005'  'Triple J Hottest 100, 2010'  'Triple J Hottest 100, 2015'
'Triple J Hottest 100, 1996'  'Triple J Hottest 100, 2001'  'Triple J Hottest 100, 2006'  'Triple J Hottest 100, 2011'  'Triple J Hottest 100, 2016'
'Triple J Hottest 100, 1997'  'Triple J Hottest 100, 2002'  'Triple J Hottest 100, 2007'  'Triple J Hottest 100, 2012'  'Triple J Hottest 100, 2017'
<kbd class="shell">ls 'my_fake_music/Triple J Hottest 100, 2017'</kbd>
'1 - Humble - Kendrick Lamar.mp3'                '5 - The Deepest Sighs, the Frankest Shadows - Gang of Youths.mp3'
'10 - What Can I Do If the Fire Goes Out? - Gang of Youths.mp3'  '6 - Green Light - Lorde.mp3'
'2 - Let Me Down Easy - Gang of Youths.mp3'          '7 - Go Bang - Pnau.mp3'
'3 - Chateau - Angus &amp; Julia Stone.mp3'              '8 - Sally - Thundamentals featuring Mataya.mp3'
'4 - Ubu - Methyl Ethel.mp3'                     '9 - Lay It on Me - Vance Joy.mp3'
<kbd class="shell">wget https://cgi.cse.unsw.edu.au/~cs2041/19T2//activities/create_music/music.zip</kbd>
<kbd class="shell">unzip music.zip</kbd>
...
<kbd class="shell">diff -r music my_fake_music</kbd>
<kbd class="shell"></kbd>
</pre>
<h4>Hints</h4>
<pre class="command_line"><kbd class="shell">wget -q -O- 'https://en.wikipedia.org/wiki/Triple_J_Hottest_100?action=raw'</kbd>
<i>...</i>
</pre>
<p>
You may find <a href="https://r12a.github.io/app-conversion/">this web page</a>
useful for dealing with unicode characters such as <a href="https://en.wikipedia.org/wiki/Dash"><i>en dash</i></a>.
</p>
<p>
When you think your program is working you can use <code>autotest</code> to run some simple automated tests:

</p><pre class="command_line"><kbd class="shell">2041 autotest create_music</kbd>
</pre>












    




     







    When you are finished working on this exercise you must submit
    your work by running <b>give</b>:



<pre class="command_line"><kbd class="shell">give cs2041 lab03_create_music create_music.sh</kbd>
</pre>
</div>
</div>
<div class="card">
<div class="card-header">
<h3 class="card-title">
                Submission
            </h3>
</div>
<div class="card-body">


When you are finished each exercises make sure you submit your work by running <b>give</b>.
<p>
You can run <b>give</b> multiple times.
Only your last submission will be marked.
</p><p>
Don't submit any exercises you haven't attempted.
</p><p>
If you are working at home, you may find it more convenient
to upload your work via
 <a href="https://cgi.cse.unsw.edu.au/~give/code/login.php?app=/~give/Student/give.php&amp;debug=get_authuser">give's web interface</a>.
</p><p>
Remember you have until

<b>Tuesday 25 June 17:59:59</b>


to submit your work.
</p><p>
You cannot obtain marks by e-mailing lab work to tutors or lecturers.
</p><p>
You check the files you have submitted <a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/student/">here</a>
</p><p>
Automarking will be run by the lecturer several days after the submission deadline
for the test, using test cases that you haven't seen:
different to the test cases <code><kbd>autotest</kbd></code> runs for
you.
</p><p>
(Hint: do your own testing as well as running
<code><kbd>autotest</kbd></code>)
</p><p>
After automarking is run by the lecturer you can
<a href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/student/">view it here</a>
the resulting mark will also be available via
<a href="https://cgi.cse.unsw.edu.au/~give/Student/sturec.php">via give's web interface</a>
</p><p>
</p><h4>Lab Marks</h4>
<p>
When all components of a lab  are automarked you should be able to view the
the marks <a href="https://cgi.cse.unsw.edu.au/~give/Student/sturec.php">via give's web interface</a>
or by running this command on a CSE machine:

</p><pre class="command_line"><kbd class="shell">2041 classrun -sturec</kbd>
</pre>
<p>
The lab exercises for each week are worth in total 1.2 marks.
</p><p>
Usually each lab exercise will be worth the same - for example if there are 5 lab exercises each will be worth 0.4 marks.
</p><p>
Except challenge exercises (see below) will never total more than 20% of each week's lab mark.
</p><p>
All of your lab marks for weeks 1-10, will be summed to give you a mark out of 12.
</p><p>
If their sum exceeds 9 - your total mark will be capped at 9.

</p><h4>Running Autotests On your Own Computer</h4>

An experimental version of autotest exists which may allow you to run autotest on your own computer.
<p>
If you are running Linux,  Windows Subsystem for Linux or OSX.  These commands might let you run autotests at home.

</p><pre class="command_line"><kbd class="shell">sudo wget https://cgi.cse.unsw.edu.au/~cs2041/19T2/resources/home_autotest -O/usr/local/bin/2041_autotest</kbd>
<kbd class="shell">sudo chmod 755 /usr/local/bin/2041_autotest</kbd>
<kbd class="shell">2041_autotest shell_snapshot</kbd>
</pre>

Autotest itself needs Python 3.6 (or later) installed.
<p>
Particular autotests may require other software install, e.g.  autotests of perl programs require Perl installed (of course).
</p><p>
The legit autotests need  python3.7, git &amp; binfmt-support installed.
</p><p>
The program embeds the autotests themselves, so you'll need to re-download if autotests are changed, added, fixed, ...
</p><p>
If it breaks on your computer post on the class forum  and we'll fix if we can, but this is very definitely experimental.

</p></div>
</div>
</div>
<footer class="mt-3 container text-center no-print">
<p class="text-muted">
<strong>COMP(2041|9044) 19T2: Software Construction</strong>
is brought to you by <br>
the <a href="https://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>
at the <a href="https://www.unsw.edu.au/">University of New South Wales</a>, Sydney.<br>
For all enquiries, please email the class account at
<a href="mailto:@cse.unsw.edu.au">cs2041@cse.unsw.edu.au</a><br>
<small>CRICOS Provider 00098G</small>
</p>
</footer>

</body></html>