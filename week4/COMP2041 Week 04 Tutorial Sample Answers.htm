<!DOCTYPE html>
<!-- saved from url=(0055)https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/answers -->
<html lang="en" class="gr__cgi_cse_unsw_edu_au"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<title>

COMP2041 Week 04 Tutorial Sample Answers

</title>




<!-- <link href="/~cs2041/19T2/flask.cgi/static/bootstrap.min.css" rel="stylesheet"> -->
<link rel="stylesheet" href="./COMP2041 Week 04 Tutorial Sample Answers_files/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link href="./COMP2041 Week 04 Tutorial Sample Answers_files/course.css" rel="stylesheet">
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/jquery.min.js"></script> -->
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/bootstrap.min.js"></script> -->

<script src="./COMP2041 Week 04 Tutorial Sample Answers_files/jquery-3.3.1.min.js"></script>
<script src="./COMP2041 Week 04 Tutorial Sample Answers_files/popper.min.js"></script>
<script src="./COMP2041 Week 04 Tutorial Sample Answers_files/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script type="text/javascript" src="./COMP2041 Week 04 Tutorial Sample Answers_files/course.js"></script>

<!-- prism code-highligting -->
<link href="./COMP2041 Week 04 Tutorial Sample Answers_files/prism.css" rel="stylesheet">
<!-- defer loading of prism.js script until DOM is loaded, as per PR #26 and https://stackoverflow.com/a/24070373 -->
<script type="text/javascript" src="./COMP2041 Week 04 Tutorial Sample Answers_files/prism.js" defer=""></script>
<script async="" src="./COMP2041 Week 04 Tutorial Sample Answers_files/ei.js"></script>

<link rel="canonical" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">
</head>
<body class="container" data-gr-c-s-loaded="true">




<div id="heading" class="row">


<div class="col-3 text-left">
<a class="heading_link" target="_blank" id="left_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>

<div class="col-6 text-center">



    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    

    

    

    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="week-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Week 04 <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="week-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/01/answers">Week 01</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/02/answers">Week 02</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/03/answers">Week 03</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/answers">Week 04</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/05/answers">Week 05</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/06/answers">Week 06</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/07/answers">Week 07</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/08/answers">Week 08</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/answers">Week 09</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/10/answers">Week 10</a>
    </div>
</span>



    
        
        
        
        
    

    
        
        
        
        
    

    
        
        
        
        
    


<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="tlb-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Tutorial <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="tlb-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/answers">Tutorial</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/04/answers">Laboratory</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/test/04/answers">Weekly Test</a>
    </div>
</span>



    
    
    
    

    
    
    
    



<span class="dropdown">
    <button class="btn btn-lg btn-link dropdown-toggle heading_button" type="button" id="qa-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Sample Answers <span class="caret"></span>
    </button>

    <div class="dropdown-menu" aria-labelledby="qa-selector">
    
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/questions">Questions</a>
        <a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/answers">Sample Answers</a>
    </div>
</span>


</div>

<div class="col-3 text-right">
<a class="heading_link" target="_blank" id="right_heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/">COMP(2041|9044) 19T2</a>
</div>


</div>


<div class="tutlab tut">
<ol>


<li>

The assignment specification doesn't fully explain the assignment - what can I do?

<div class="answer">
A big part of the assignment is understanding what <em>git</em> does.
<p>
You'll spend more time doing this than implementing subset 0.
</p><p>
On line tutorials can help with this.
</p><p>
You can also use the the reference implementation to discover what your program is supposed to do in any situation.

</p></div>

</li><li>

How hard are the subsets?

<div class="answer">
Once you understand what you have to do subset 0 is not that hard.
<p>
Subset 1 is hard.
</p><p>
Subset 2 really hard.
</p><p>
But note the marking scheme recognizes the difficulty of subsets 0 &amp; 1.

</p></div>

</li><li>
What is <code>gitlab.cse.unsw.edu.au</code> and how do I want use it for ass1?
<p>
</p><div class="answer">
Its a server run by CSE to host <em>git</em> repositories of student programs for some CSE courses.
<p>
As assignment 1 is to implement a version control system similar to git, it is too confusing to ask you to use git
for the assignment.
</p><p>
Instead <b>give</b> will maintain a git repository for the assignment for you.
</p><p>
Every you run give for the assignment, it will create a commit in a git repository and it will
push the commit to <a href="https://gitlab.cse.unsw.edu.au/">https://gitlab.cse.unsw.edu.au</a> when you can access it.
</p><p>
Every time you work on the assignment you should run give when you finish.
</p><p>
This ensures you have a complete backup of all work on your program
and can return to its state at any stage.

</p><p>
It will also allow your tutor to check you are progressing on the lab as they can access your gitlab repository

</p></div>

</li><li>
What does <b>git init</b> do?
<p>
How does this differ from <b>legit-init</b>

</p><div class="answer">
<code> git init</code> creates an empty repository as does <b> legit-init</b>
<p>
git uses the sub-directory <b>.git</b>
</p><p>
<b>legit-init</b> uses the sub-directory <b>.legit</b>

</p></div>

</li><li>
What do <b>git add <i>file</i></b> and <b>legit-add <i>file</i></b> do?

<div class="answer">
Adds a copy of <i>file</i> to the repository's <b>index</b>.
</div>


</li><li>
What is the index in <b>legit</b> (and <b>git</b>), and where does it get stored?

<div class="answer">
Files get added to the repository via the index so its sometimes called a staging area.
<p>
It must be stored in <b>.legit</b>. Exactly how you store it is up to you.
</p><p>
You might create a directory <b>.legit/index/</b> and store the files there.
</p></div>


</li><li>
What is a commit in <b>legit</b> (and <b>git</b>), and where does it get stored?

<div class="answer">
A commit preserves the state of all files in the index.
<p>
It must be stored in <b>.legit</b>. Exactly how you store it is up to you.
</p><p>
You might create a directory <b>.legit/<i>commit-number</i></b> and store the files there.
</p></div>

</li><li>

Discuss what <b>./legit-init status</b> prints below?

<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">./legit-init</kbd>
Initialized empty legit repository in .legit
<kbd class="shell">touch a b c d e f g h</kbd>
<kbd class="shell">./legit-add a b c d e f</kbd>
<kbd class="shell">./legit-commit -m 'first commit'</kbd>
Committed as commit 0
<kbd class="shell">echo hello &gt;a</kbd>
<kbd class="shell">echo hello &gt;b</kbd>
<kbd class="shell">echo hello &gt;c</kbd>
<kbd class="shell">./legit-add a b</kbd>
<kbd class="shell">echo world &gt;a</kbd>
<kbd class="shell">rm d</kbd>
<kbd class="shell">./legit-rm e</kbd>
<kbd class="shell">./legit-add g</kbd>
<kbd class="shell">./legit-status</kbd>
a - file changed, different changes staged for commit
b - file changed, changes staged for commit
c - file changed, changes not staged for commit
d - file deleted
e - deleted
f - same as repo
g - added to index
h - untracked
legit-add - untracked
legit-commit - untracked
legit-init - untracked
legit-rm - untracked
legit-status - untracked
</pre>

</li><li>
<p>
What is the difference in value/type of the following Perl expressions:
</p><p>
</p><ol type="a">
<li> <code>"a"</code> &nbsp; <small>vs</small> &nbsp; <code>'a'</code>
<div class="answer">
no difference - both are strings containing a single 'a' character
</div>
</li>
<li> <code>"A"</code> &nbsp; <small>vs</small> &nbsp; <code>A</code>
<div class="answer">
no difference - both are strings containing a single 'A' character
</div>
</li>
<li> <code>"abc"</code> &nbsp; <small>vs</small> &nbsp; <code>'abc'</code>
<div class="answer">
no difference - both are strings containing the three characters 'a','b','c'
</div>
</li>
<li> <code>"it\'s"</code> &nbsp; <small>vs</small> &nbsp; <code>'it\'s'</code>
<div class="answer">
no difference - both are strings containing the four characters 'i','t',apostrophe,'s'
</div>
</li>
<li> <code>42</code> &nbsp; <small>vs</small> &nbsp; <code>"42"</code>
<div class="answer">
no difference - both are strings containing two characters, '4' and '2'
</div>
</li>
<li> <code>"3"</code> &nbsp; <small>vs</small> &nbsp; <code>"3.0"</code>
<div class="answer">
the first is a string containing one character and the second contains three characters,
if evaluated in a numeric context they are the same: <code>"3" ne "3.0"</code> but <code>"3" == "3.0"</code>
</div>
</li>
<li> <code>"$2.50"</code> &nbsp; <small>vs</small> &nbsp; <code>'$2.50'</code>
<div class="answer">
in the first case, the value of the Perl internal variable <code>$2</code>
    is interpolated into the string; since most likely this will be the
    empty string, the resulting string will be the three-character
    string ".50" <br>
    in the second case, the <code>$</code> is not treated specially
    and so the result is the literal five-character string "$2.50"
</div>
</li>
</ol>
</li><li>

Write a Perl program, <code>nargs.pl</code> which prints how many arguments it has been
given. For example:


    
        
    





<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">./nargs.pl the quick brown fox</kbd>
4
</pre>

<div class="answer">
Sample Perl solution






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
print $#ARGV<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></code></pre>





Sample Python solution






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env python
import sys
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>




</div>
</li><li>

Write a Perl program, <code>devowel.pl</code> which filters any
vowels from its input. For example:


    
        
    





<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">./devowel.pl</kbd>
<kbd>The quick brown fox
jumped over the lazy dog.
</kbd><span class="eof"></span>
Th qck brwn fx
jmpd vr th lzy dg.
</pre>

<div class="answer">
Sample Perl solution - simple code






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
<span class="token keyword">while</span> <span class="token punctuation">(</span>$line <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $line <span class="token operator">=</span><span class="token operator">~</span> s<span class="token operator">/</span><span class="token punctuation">[</span>aeiou<span class="token punctuation">]</span><span class="token comment">//gi;</span>
    print $line<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>





Sample Perl solution - using $_






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s<span class="token operator">/</span><span class="token punctuation">[</span>aeiou<span class="token punctuation">]</span><span class="token comment">//gi;</span>
    print<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>





Sample Perl solution - using $_ and -p switch






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w <span class="token operator">-</span>p
s<span class="token operator">/</span><span class="token punctuation">[</span>aeiou<span class="token punctuation">]</span><span class="token comment">//gi;</span></code></pre>





Perl also makes it convenient to perform operations like this from the command line,
for example:

<pre class="command_line"><kbd class="shell">perl -p -e 's/[aeiou]//gi'</kbd>
</pre>

Note that the <code>gi</code> above means <b>g</b>lobally (i.e. all occurrences)
and case-<b>i</b>nsensitive.
<p>
Sample Python solution






    
        
    



    
        </p><pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python
import fileinput<span class="token punctuation">,</span> re
<span class="token keyword">for</span> line <span class="token keyword">in</span> fileinput<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sys<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>r<span class="token string">'[aeiou]'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> line<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>




</div>
</li><li>
Write a simple version of the <code>head</code> command in Perl, that
accepts an optional command line argument in the form
<code>-<i>n</i></code>, where <code><i>n</i></code> is a number,
and displays the first <code><i>n</i></code> lines from its standard
input.
If the <code>-<i>n</i></code> option is not used, then the program
simply displays the first ten lines from its standard input.
<p>
Examples of use:
</p><pre class="command_line"><kbd class="shell">perl head.pl &lt;file2</kbd>        # display first ten lines of file2
...
<kbd class="shell">perl head.pl -10 &lt;file2</kbd>     # same as previous command
...
<kbd class="shell">perl head.pl -5 &lt;file2</kbd>      # display first five lines of file2
...
</pre>

<div class="answer">
Perl solution with while loop






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
$n_lines <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">&amp;&amp;</span> $ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">~</span> <span class="token operator">/</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $n_lines <span class="token operator">=</span> $ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    $n_lines <span class="token operator">=</span><span class="token operator">~</span> s<span class="token operator">/</span><span class="token operator">-</span><span class="token comment">//;</span>
    shift @ARGV<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
$n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>$n<span class="token operator">++</span> <span class="token operator">&gt;</span> $n_lines<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        last<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    print<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>





Perl solution reading all input into an array






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
$n_lines <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">&amp;&amp;</span> $ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">~</span> <span class="token operator">/</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $n_lines <span class="token operator">=</span> shift @ARGV<span class="token punctuation">;</span>
    $n_lines <span class="token operator">=</span><span class="token operator">~</span> s<span class="token operator">/</span><span class="token operator">-</span><span class="token comment">//;</span>
<span class="token punctuation">}</span>
@lines <span class="token operator">=</span> <span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">;</span>
print @lines<span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">.</span>$n_lines<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>





Cryptic  One-line Perl solution






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
print <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>@ARGV<span class="token operator">&amp;&amp;</span><span class="token operator">-</span>$ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>





Python solution with while loop






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

import re<span class="token punctuation">,</span> sys

n_lines <span class="token operator">=</span> <span class="token number">10</span>

<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> and re<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r<span class="token string">'-[0-9]+'</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    arg <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    arg <span class="token operator">=</span> arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> # remove first character
    n_lines <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>

n <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">&gt;</span> n_lines<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
    n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span></code></pre>





Python solution reading all input into an array






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

import re<span class="token punctuation">,</span> sys

n_lines <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> and re<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r<span class="token string">'-[0-9]+'</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n_lines <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

# inefficient <span class="token operator">-</span> reads entire file
sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">readlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>n_lines<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>





Python solution using an iterator






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

import re<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> itertools

n_lines <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> and re<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r<span class="token string">'-[0-9]+'</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n_lines <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> line <span class="token keyword">in</span> itertools<span class="token punctuation">.</span><span class="token function">islice</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span> n_lines<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre>




</div>

</li><li>
Modify the <code>head</code> program from the previous question so that,
as well as handling an optional <code>-<i>n</i></code> argument to
specify how many lines, it also handles multiple files on the command
line and displays the first <code><i>n</i></code> lines from each file,
separating them by a line of the form <code>==&gt; <i>FileName</i> &lt;===</code>.
<p>
Examples of use:
</p><pre class="command_line"><kbd class="shell">perl head.pl file1 file2 file3</kbd>  # display first ten lines of each file
...
<kbd class="shell">perl head.pl -3 file1 file2</kbd>   # display first three lines of each file
...
</pre>
<p>

</p><div class="answer">
Sample Perl solution






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
<span class="token keyword">if</span> <span class="token punctuation">(</span>$ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">~</span> <span class="token operator">/</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $max <span class="token operator">=</span> shift @ARGV<span class="token punctuation">;</span>
    $max <span class="token operator">=</span><span class="token operator">~</span> s<span class="token operator">/</span><span class="token operator">-</span><span class="token comment">//;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    $max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
# default is stdin <span class="token keyword">if</span> no files specified
$ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-"</span> <span class="token keyword">if</span> @ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    open my $input<span class="token punctuation">,</span> <span class="token string">"&lt;$file"</span> or die <span class="token string">"$file: can not open: $!\n"</span><span class="token punctuation">;</span>
    print <span class="token string">"==&gt; $file &lt;==\n"</span><span class="token punctuation">;</span>
    @lines <span class="token operator">=</span> <span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    print @lines<span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">.</span>$max<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    close $input<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>





Sample Python solution






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

import re<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> itertools

n_lines <span class="token operator">=</span> <span class="token number">10</span>

<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> and re<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r<span class="token string">'-[0-9]+'</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n_lines <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> filename <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"==&gt; %s &lt;=="</span> <span class="token operator">%</span> filename<span class="token punctuation">)</span>
        <span class="token keyword">if</span> filename <span class="token operator">==</span> <span class="token string">"-"</span><span class="token punctuation">:</span>
            stream <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            stream <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> itertools<span class="token punctuation">.</span><span class="token function">islice</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> n_lines<span class="token punctuation">)</span><span class="token punctuation">:</span>
            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
        <span class="token keyword">if</span> filename <span class="token operator">!=</span> <span class="token string">"-"</span><span class="token punctuation">:</span>
            stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    except IOError as  e<span class="token punctuation">:</span>
        <span class="token punctuation">(</span>errno<span class="token punctuation">,</span> strerror<span class="token punctuation">)</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>args
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"%s: can not open: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>filename<span class="token punctuation">,</span> strerror<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>




</div>
</li><li>

Write a simple version of the <code>grep</code> command, that takes a
regular expression as its first command line argument and then prints
all lines in the standard input (or named files) that contain this
pattern.
<p>
Examples of use:

</p><pre class="command_line"><kbd class="shell">perl mygrep.pl 'a.*c' file1 file2 file3</kbd>     # all lines containing a...c
...
<kbd class="shell">perl mygrep.pl '[0-9]+' file1 file2 file3</kbd>   # all lines containing numbers
...
<kbd class="shell">perl mygrep.pl '^The' &lt;file1</kbd>          # all lines starting with "The"
...
</pre>

<div class="answer">
Sample Perl solution using a while loop






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
$pattern <span class="token operator">=</span> shift @ARGV<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    print <span class="token keyword">if</span> <span class="token operator">/</span>$pattern<span class="token operator">/</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>





Sample Perl solution using an array






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
# <span class="token operator">-</span> <span class="token function">grep</span><span class="token punctuation">(</span><span class="token operator">/</span>pattern<span class="token operator">/</span><span class="token punctuation">,</span>@array<span class="token punctuation">)</span> returns array containing
#   just elements that match the pattern

$pattern <span class="token operator">=</span> shift @ARGV<span class="token punctuation">;</span>
print <span class="token function">grep</span><span class="token punctuation">(</span><span class="token operator">/</span>$pattern<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

# behaves like <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> cat f1 f2 f3 <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> grep pattern
# not the same as <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> grep pattern f1 f2 f3 <span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>





Sample Python solution using a for loop






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

import re<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> fileinput

pattern <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> fileinput<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> re<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre>





More  Python-ish (functional) solution






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

import re<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> fileinput

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>search<span class="token punctuation">,</span> fileinput<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>




</div>

</li><li>
Modify the <code>grep</code> command from the previous question so that
accepts a <code>-v</code> command line option to reverse the sense of
the test (i.e. display only lines that do <em>not</em> match the pattern).
It should continue with its original behaviour if no <code>-v</code> is
specified.

<div class="answer">
Sample Perl solution using a while loop






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
<span class="token keyword">if</span> <span class="token punctuation">(</span>$ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> eq <span class="token string">"-v"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $doOpposite <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    shift @ARGV<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
$pattern <span class="token operator">=</span> shift @ARGV<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>$doOpposite<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        print <span class="token keyword">if</span> <span class="token operator">!</span><span class="token operator">/</span>$pattern<span class="token operator">/</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        print <span class="token keyword">if</span> <span class="token operator">/</span>$pattern<span class="token operator">/</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>





Sample Perl solution  using an array and xor






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w
<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">&amp;&amp;</span> $ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> eq <span class="token string">"-v"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $doOpposite <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    shift @ARGV<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
$pattern <span class="token operator">=</span> shift @ARGV<span class="token punctuation">;</span>
print grep <span class="token punctuation">{</span>$doOpposite<span class="token operator">^</span><span class="token operator">/</span>$pattern<span class="token operator">/</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></code></pre>





Sample Python using a for loop






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

import re<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> fileinput

do_opposite <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-v"</span><span class="token punctuation">:</span>
    do_opposite <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

pattern <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> line <span class="token keyword">in</span> fileinput<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> re<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> not do_opposite<span class="token punctuation">:</span>
            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> do_opposite<span class="token punctuation">:</span>
            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre>





Functional python solution






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

import re<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> fileinput

<span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-v"</span><span class="token punctuation">:</span>
    sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    p <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    f <span class="token operator">=</span> lambda x<span class="token punctuation">:</span> not p<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> fileinput<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>




</div>


<h3>Revision questions</h3>

The remaining tutorial questions are primarily intended for revision - either this week
or later in session.
<p>
Your tutor may still choose to cover some of the questions time permitting.
</p><p>


</p></li><li>
<p>
The following programs are all Perl versions of the <code>cat</code>
program. Each of them either reads from standard input (if there are
no command line arguments) or treats each command line argument as a
file name, opens the file, and reads it. The final one shows just how
concise Perl code can be. You may find the ideas in these programs
useful in helping you solve the problems below.






    
        
    



    
        </p><pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

# First Perl version of cat
# Verbose<span class="token punctuation">,</span> but shows exactly what's happening

# <span class="token keyword">if</span> no args<span class="token punctuation">,</span> read from stdin
<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>$line <span class="token operator">=</span> <span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        # note<span class="token punctuation">:</span> line still has \n
        print $line<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        open my $input<span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> $file or die <span class="token string">"Can not open $file: $!\n"</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>$line <span class="token operator">=</span> <span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            print $line<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        close $input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>










    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

# Second Perl version of cat
# More concise<span class="token punctuation">,</span> by using special variable $_

<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        print<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        open my $input<span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> $file or die <span class="token string">"Can not open $file: $!\n"</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            print<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        close $input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>










    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

# Third Perl version of cat
# places input into an array

<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    @lines <span class="token operator">=</span> <span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    print @lines<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        open my $input<span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> $file or die <span class="token string">"Can not open $file: $!\n"</span><span class="token punctuation">;</span>
        @lines <span class="token operator">=</span> <span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">;</span>
        print @lines<span class="token punctuation">;</span>
        close $input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>










    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

# Fourth Perl version of cat
# More concise<span class="token punctuation">,</span> but makes filtering difficult

<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    print <span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        open my $input<span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> $file or die <span class="token string">"Can not open $file: $!\n"</span><span class="token punctuation">;</span>
        print <span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">;</span>
        close $input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>





<pre class="program"># Other versions of cat
# Make use of the fact that &lt;&gt; has a special meaning
# - if no command line arguments, read standard input
# - otherwise, open each argument as a file and read it
# Very concise, but ...
# - you'll need to put up with Perl's error messages
# - you treat all files as a single stream ... which means
#   - you can't distinguish which file each line comes from
#   - there is no scope for doing things at file boundaries
while (&lt;&gt;) { print; }
#or
@lines = &lt;&gt;;
print @lines;
#or
print &lt;&gt;;
</pre>
<p>
Write a new version of <code>cat</code> so that it accepts
a <code>-n</code> command line argument and then prints a line number at
the start of each line in a field of width 6, followed by two spaces,
followed by the text of the line. The numbers should constantly increase
over all of the input files (i.e. don't start renumbering at the start
of each file). The program always reads from its standard input.
</p>
<p>
Example of output:

</p><pre class="command_line"><kbd class="shell">perl cat -n myFile</kbd>
     1  This is the first line of my file
     2  This is the second line of my file
     3  This is the third line of my file
         ...
  1000  This is the thousandth line of my file
</pre>

<div class="answer">





    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> $ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> eq <span class="token string">"-n"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $doNumbering <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    shift<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
$nlines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    printf <span class="token string">"%6d  "</span><span class="token punctuation">,</span>$nlines<span class="token operator">++</span> <span class="token keyword">if</span> $doNumbering<span class="token punctuation">;</span>
    print<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>






Note that the <code>shift</code> is important. It removes the option
from the argument list so that <code>&lt;&gt;</code> is left with the
correct command-line arguments to process (i.e. just the file names).
</div>

</li><li>
Modify the <code>cat</code> program from the previous question so that
it also accepts a <code>-v</code> command line option to display <em>all</em>
characters in the file in printable form. In particular, end of lines should
be shown by a <code>$</code> symbol (useful for finding trailing whitespace
in lines) and all control characters (ascii code less than 32) should be
shown as <code>^<i>X</i></code> (where <code><i>X</i></code> is the
printable character obtained by adding the code for
'A' to the control character code).
So, for example, tabs (ascii code 9) should display as <code>^I</code>.
<br><i>Hint:</i> the <code>chr</code> and <code>ord</code> functions might be useful.
Try
<pre class="command_line"><kbd class="shell">perldoc -f ord</kbd>
</pre>
for info about functions such as these.
<p>
Example of output:
</p><pre class="command_line"><kbd class="shell">perl cat -v &lt; myFile</kbd>
This file contains a tabbed list:$
^I- point 1$
^I- point 2$
^I- point 3$
And this line has trailing spaces   $
which would otherwise be invisible.$
</pre>

<div class="answer">





    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

<span class="token keyword">if</span> <span class="token punctuation">(</span>$ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> eq <span class="token string">"-n"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $doNumbering <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    shift<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>$ARGV<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> eq <span class="token string">"-v"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $doVisible <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    shift<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

$nlines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    printf <span class="token string">"%6d  "</span><span class="token punctuation">,</span>$nlines<span class="token operator">++</span> <span class="token keyword">if</span> $doNumbering<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>$doVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        print<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        chomp<span class="token punctuation">;</span>
        foreach $c <span class="token punctuation">(</span>split <span class="token comment">//) {</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>$c<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                print <span class="token string">"$c"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                print <span class="token string">"^"</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>$c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        print <span class="token string">"\$\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>




</div>

</li><li>
<p>
Write a version of the <code>tac</code> command in Perl, that accepts
a list of filenames and displays the lines from each file in reverse order.
</p><div class="answer">

Sample Perl solution






    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> # no args<span class="token punctuation">,</span> read from stdin
    print reverse <span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        open my $input<span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> $file or die <span class="token string">"$file:can not open: $!\n"</span><span class="token punctuation">;</span>
        print reverse <span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">;</span>
        close $input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>





The following might look attractive, but treats all files as a
single input, and reverses that. It doesn't do it file by file
like the real <code>tac</code>.

<pre class="program">#!/usr/bin/perl -w
print reverse &lt;&gt;;
# same as ... cat f1 f2 f3 .. | tac
# not the same as ... tac f1 f2 f3
</pre>

Sample Python solution







    
        
    



    
        <pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

import sys

<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token function">list</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> filename <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        with <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> as f<span class="token punctuation">:</span>
            <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token function">list</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre>




</div>

</li></ol>
</div>





<footer class="mt-3 container text-center no-print">
<p class="text-muted">
<strong>COMP(2041|9044) 19T2: Software Construction</strong>
is brought to you by <br>
the <a href="https://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>
at the <a href="https://www.unsw.edu.au/">University of New South Wales</a>, Sydney.<br>
For all enquiries, please email the class account at
<a href="mailto:@cse.unsw.edu.au">cs2041@cse.unsw.edu.au</a><br>

<small>CRICOS Provider 00098G</small>
</p>



</footer>





</body></html>