<!DOCTYPE html>
<!-- saved from url=(0057)https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/questions -->
<html lang="en" class="gr__cgi_cse_unsw_edu_au"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport">
<title>

COMP2041 Week 04 Tutorial Questions

</title>
<!-- <link href="/~cs2041/19T2/flask.cgi/static/bootstrap.min.css" rel="stylesheet"> -->
<link crossorigin="anonymous" href="./COMP2041 Week 04 Tutorial Questions_files/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" rel="stylesheet">
<link href="./COMP2041 Week 04 Tutorial Questions_files/course.css" rel="stylesheet">
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/jquery.min.js"></script> -->
<!-- <script type="text/javascript" src="/~cs2041/19T2/flask.cgi/static/bootstrap.min.js"></script> -->
<script src="./COMP2041 Week 04 Tutorial Questions_files/jquery-3.3.1.min.js"></script>
<script src="./COMP2041 Week 04 Tutorial Questions_files/popper.min.js"></script>
<script crossorigin="anonymous" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" src="./COMP2041 Week 04 Tutorial Questions_files/bootstrap.min.js"></script>
<script src="./COMP2041 Week 04 Tutorial Questions_files/course.js" type="text/javascript"></script>
<!-- prism code-highligting -->
<link href="./COMP2041 Week 04 Tutorial Questions_files/prism.css" rel="stylesheet">
<!-- defer loading of prism.js script until DOM is loaded, as per PR #26 and https://stackoverflow.com/a/24070373 -->
<script defer="" src="./COMP2041 Week 04 Tutorial Questions_files/prism.js" type="text/javascript"></script>
<script async="" src="./COMP2041 Week 04 Tutorial Questions_files/ei.js"></script>
<link href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/" rel="canonical">
</head>
<body class="container" data-gr-c-s-loaded="true">
<div class="row" id="heading">
<div class="col-3 text-left">
<a class="heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/" id="left_heading_link" target="_blank">COMP(2041|9044) 19T2</a>
</div>
<div class="col-6 text-center">
<span class="dropdown">
<button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link dropdown-toggle heading_button" data-toggle="dropdown" id="week-selector" type="button">
        Week 04 <span class="caret"></span>
</button>
<div aria-labelledby="week-selector" class="dropdown-menu">
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/01/questions">Week 01</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/02/questions">Week 02</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/03/questions">Week 03</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/questions">Week 04</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/05/questions">Week 05</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/06/questions">Week 06</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/07/questions">Week 07</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/08/questions">Week 08</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/09/questions">Week 09</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/10/questions">Week 10</a>
</div>
</span>
<span class="dropdown">
<button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link dropdown-toggle heading_button" data-toggle="dropdown" id="tlb-selector" type="button">
        Tutorial <span class="caret"></span>
</button>
<div aria-labelledby="tlb-selector" class="dropdown-menu">
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/questions">Tutorial</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/lab/04/questions">Laboratory</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/test/04/questions">Weekly Test</a>
</div>
</span>
<span class="dropdown">
<button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link dropdown-toggle heading_button" data-toggle="dropdown" id="qa-selector" type="button">
        Questions <span class="caret"></span>
</button>
<div aria-labelledby="qa-selector" class="dropdown-menu">
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/questions">Questions</a>
<a class="dropdown-item" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/tut/04/answers">Sample Answers</a>
</div>
</span>
</div>
<div class="col-3 text-right">
<a class="heading_link" href="https://cgi.cse.unsw.edu.au/~cs2041/19T2/" id="right_heading_link" target="_blank">COMP(2041|9044) 19T2</a>
</div>
</div>
<div class="tutlab tut">
<ol>
<li>

The assignment specification doesn't fully explain the assignment - what can I do?

<div></div>
</li><li>

How hard are the subsets?

<div></div>
</li><li>
What is <code>gitlab.cse.unsw.edu.au</code> and how do I want use it for ass1?
<p>
</p><div></div>
</li><li>
What does <b>git init</b> do?
<p>
How does this differ from <b>legit-init</b>
</p><div></div>
</li><li>
What do <b>git add <i>file</i></b> and <b>legit-add <i>file</i></b> do?

<div></div>
</li><li>
What is the index in <b>legit</b> (and <b>git</b>), and where does it get stored?

<div></div>
</li><li>
What is a commit in <b>legit</b> (and <b>git</b>), and where does it get stored?

<div></div>
</li><li>

Discuss what <b>./legit-init status</b> prints below?

<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">./legit-init</kbd>
Initialized empty legit repository in .legit
<kbd class="shell">touch a b c d e f g h</kbd>
<kbd class="shell">./legit-add a b c d e f</kbd>
<kbd class="shell">./legit-commit -m 'first commit'</kbd>
Committed as commit 0
<kbd class="shell">echo hello &gt;a</kbd>
<kbd class="shell">echo hello &gt;b</kbd>
<kbd class="shell">echo hello &gt;c</kbd>
<kbd class="shell">./legit-add a b</kbd>
<kbd class="shell">echo world &gt;a</kbd>
<kbd class="shell">rm d</kbd>
<kbd class="shell">./legit-rm e</kbd>
<kbd class="shell">./legit-add g</kbd>
<kbd class="shell">./legit-status</kbd>
a - file changed, different changes staged for commit
b - file changed, changes staged for commit
c - file changed, changes not staged for commit
d - file deleted
e - deleted
f - same as repo
g - added to index
h - untracked
legit-add - untracked
legit-commit - untracked
legit-init - untracked
legit-rm - untracked
legit-status - untracked
</pre>
</li><li>
<p>
What is the difference in value/type of the following Perl expressions:
</p><p>
</p><ol type="a">
<li> <code>"a"</code> &nbsp; <small>vs</small> &nbsp; <code>'a'</code>
<div></div>
</li>
<li> <code>"A"</code> &nbsp; <small>vs</small> &nbsp; <code>A</code>
<div></div>
</li>
<li> <code>"abc"</code> &nbsp; <small>vs</small> &nbsp; <code>'abc'</code>
<div></div>
</li>
<li> <code>"it\'s"</code> &nbsp; <small>vs</small> &nbsp; <code>'it\'s'</code>
<div></div>
</li>
<li> <code>42</code> &nbsp; <small>vs</small> &nbsp; <code>"42"</code>
<div></div>
</li>
<li> <code>"3"</code> &nbsp; <small>vs</small> &nbsp; <code>"3.0"</code>
<div></div>
</li>
<li> <code>"$2.50"</code> &nbsp; <small>vs</small> &nbsp; <code>'$2.50'</code>
<div></div>
</li>
</ol>
</li><li>

Write a Perl program, <code>nargs.pl</code> which prints how many arguments it has been
given. For example:


    
        
    





<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">./nargs.pl the quick brown fox</kbd>
4
</pre>
<div></div>
</li><li>

Write a Perl program, <code>devowel.pl</code> which filters any
vowels from its input. For example:


    
        
    





<pre class="command_line" style="max-height: 32em;overflow:  auto;"><kbd class="shell">./devowel.pl</kbd>
<kbd>The quick brown fox
jumped over the lazy dog.
</kbd><span class="eof"></span>
Th qck brwn fx
jmpd vr th lzy dg.
</pre>
<div></div>
</li><li>
Write a simple version of the <code>head</code> command in Perl, that
accepts an optional command line argument in the form
<code>-<i>n</i></code>, where <code><i>n</i></code> is a number,
and displays the first <code><i>n</i></code> lines from its standard
input.
If the <code>-<i>n</i></code> option is not used, then the program
simply displays the first ten lines from its standard input.
<p>
Examples of use:
</p><pre class="command_line"><kbd class="shell">perl head.pl &lt;file2</kbd>        # display first ten lines of file2
...
<kbd class="shell">perl head.pl -10 &lt;file2</kbd>     # same as previous command
...
<kbd class="shell">perl head.pl -5 &lt;file2</kbd>      # display first five lines of file2
...
</pre>
<div></div>
</li><li>
Modify the <code>head</code> program from the previous question so that,
as well as handling an optional <code>-<i>n</i></code> argument to
specify how many lines, it also handles multiple files on the command
line and displays the first <code><i>n</i></code> lines from each file,
separating them by a line of the form <code>==&gt; <i>FileName</i> &lt;===</code>.
<p>
Examples of use:
</p><pre class="command_line"><kbd class="shell">perl head.pl file1 file2 file3</kbd>  # display first ten lines of each file
...
<kbd class="shell">perl head.pl -3 file1 file2</kbd>   # display first three lines of each file
...
</pre>
<p>
</p><div></div>
</li><li>

Write a simple version of the <code>grep</code> command, that takes a
regular expression as its first command line argument and then prints
all lines in the standard input (or named files) that contain this
pattern.
<p>
Examples of use:

</p><pre class="command_line"><kbd class="shell">perl mygrep.pl 'a.*c' file1 file2 file3</kbd>     # all lines containing a...c
...
<kbd class="shell">perl mygrep.pl '[0-9]+' file1 file2 file3</kbd>   # all lines containing numbers
...
<kbd class="shell">perl mygrep.pl '^The' &lt;file1</kbd>          # all lines starting with "The"
...
</pre>
<div></div>
</li><li>
Modify the <code>grep</code> command from the previous question so that
accepts a <code>-v</code> command line option to reverse the sense of
the test (i.e. display only lines that do <em>not</em> match the pattern).
It should continue with its original behaviour if no <code>-v</code> is
specified.

<div></div>
<h3>Revision questions</h3>

The remaining tutorial questions are primarily intended for revision - either this week
or later in session.
<p>
Your tutor may still choose to cover some of the questions time permitting.
</p><p>
</p></li><li>
<p>
The following programs are all Perl versions of the <code>cat</code>
program. Each of them either reads from standard input (if there are
no command line arguments) or treats each command line argument as a
file name, opens the file, and reads it. The final one shows just how
concise Perl code can be. You may find the ideas in these programs
useful in helping you solve the problems below.






    
        
    



    
        </p><pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

# First Perl version of cat
# Verbose<span class="token punctuation">,</span> but shows exactly what's happening

# <span class="token keyword">if</span> no args<span class="token punctuation">,</span> read from stdin
<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>$line <span class="token operator">=</span> <span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        # note<span class="token punctuation">:</span> line still has \n
        print $line<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        open my $input<span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> $file or die <span class="token string">"Can not open $file: $!\n"</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>$line <span class="token operator">=</span> <span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            print $line<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        close $input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

# Second Perl version of cat
# More concise<span class="token punctuation">,</span> by using special variable $_

<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        print<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        open my $input<span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> $file or die <span class="token string">"Can not open $file: $!\n"</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            print<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        close $input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

# Third Perl version of cat
# places input into an array

<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    @lines <span class="token operator">=</span> <span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    print @lines<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        open my $input<span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> $file or die <span class="token string">"Can not open $file: $!\n"</span><span class="token punctuation">;</span>
        @lines <span class="token operator">=</span> <span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">;</span>
        print @lines<span class="token punctuation">;</span>
        close $input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class="program language-clike"><code class=" language-clike">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>perl <span class="token operator">-</span>w

# Fourth Perl version of cat
# More concise<span class="token punctuation">,</span> but makes filtering difficult

<span class="token keyword">if</span> <span class="token punctuation">(</span>@ARGV <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    print <span class="token operator">&lt;</span>STDIN<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    foreach $file <span class="token punctuation">(</span>@ARGV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        open my $input<span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> $file or die <span class="token string">"Can not open $file: $!\n"</span><span class="token punctuation">;</span>
        print <span class="token operator">&lt;</span>$input<span class="token operator">&gt;</span><span class="token punctuation">;</span>
        close $input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class="program"># Other versions of cat
# Make use of the fact that &lt;&gt; has a special meaning
# - if no command line arguments, read standard input
# - otherwise, open each argument as a file and read it
# Very concise, but ...
# - you'll need to put up with Perl's error messages
# - you treat all files as a single stream ... which means
#   - you can't distinguish which file each line comes from
#   - there is no scope for doing things at file boundaries
while (&lt;&gt;) { print; }
#or
@lines = &lt;&gt;;
print @lines;
#or
print &lt;&gt;;
</pre>
<p>
Write a new version of <code>cat</code> so that it accepts
a <code>-n</code> command line argument and then prints a line number at
the start of each line in a field of width 6, followed by two spaces,
followed by the text of the line. The numbers should constantly increase
over all of the input files (i.e. don't start renumbering at the start
of each file). The program always reads from its standard input.
</p>
<p>
Example of output:

</p><pre class="command_line"><kbd class="shell">perl cat -n myFile</kbd>
     1  This is the first line of my file
     2  This is the second line of my file
     3  This is the third line of my file
         ...
  1000  This is the thousandth line of my file
</pre>
<div></div>
</li><li>
Modify the <code>cat</code> program from the previous question so that
it also accepts a <code>-v</code> command line option to display <em>all</em>
characters in the file in printable form. In particular, end of lines should
be shown by a <code>$</code> symbol (useful for finding trailing whitespace
in lines) and all control characters (ascii code less than 32) should be
shown as <code>^<i>X</i></code> (where <code><i>X</i></code> is the
printable character obtained by adding the code for
'A' to the control character code).
So, for example, tabs (ascii code 9) should display as <code>^I</code>.
<br><i>Hint:</i> the <code>chr</code> and <code>ord</code> functions might be useful.
Try
<pre class="command_line"><kbd class="shell">perldoc -f ord</kbd>
</pre>
for info about functions such as these.
<p>
Example of output:
</p><pre class="command_line"><kbd class="shell">perl cat -v &lt; myFile</kbd>
This file contains a tabbed list:$
^I- point 1$
^I- point 2$
^I- point 3$
And this line has trailing spaces   $
which would otherwise be invisible.$
</pre>
<div></div>
</li><li>
<p>
Write a version of the <code>tac</code> command in Perl, that accepts
a list of filenames and displays the lines from each file in reverse order.
</p><div></div>
</li></ol>
</div>
<footer class="mt-3 container text-center no-print">
<p class="text-muted">
<strong>COMP(2041|9044) 19T2: Software Construction</strong>
is brought to you by <br>
the <a href="https://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>
at the <a href="https://www.unsw.edu.au/">University of New South Wales</a>, Sydney.<br>
For all enquiries, please email the class account at
<a href="mailto:@cse.unsw.edu.au">cs2041@cse.unsw.edu.au</a><br>
<small>CRICOS Provider 00098G</small>
</p>
</footer>

</body></html>